// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: beer.proto

package beerproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MashStepType_MashStepTypeType int32

const (
	MashStepType_INFUSION       MashStepType_MashStepTypeType = 0
	MashStepType_TEMPERATURE    MashStepType_MashStepTypeType = 1
	MashStepType_DECOCTION      MashStepType_MashStepTypeType = 2
	MashStepType_SOURING_MASH   MashStepType_MashStepTypeType = 3
	MashStepType_SOURING_WORT   MashStepType_MashStepTypeType = 4
	MashStepType_DRAIN_MASH_TUN MashStepType_MashStepTypeType = 5
	MashStepType_SPARGE         MashStepType_MashStepTypeType = 6
)

// Enum value maps for MashStepType_MashStepTypeType.
var (
	MashStepType_MashStepTypeType_name = map[int32]string{
		0: "INFUSION",
		1: "TEMPERATURE",
		2: "DECOCTION",
		3: "SOURING_MASH",
		4: "SOURING_WORT",
		5: "DRAIN_MASH_TUN",
		6: "SPARGE",
	}
	MashStepType_MashStepTypeType_value = map[string]int32{
		"INFUSION":       0,
		"TEMPERATURE":    1,
		"DECOCTION":      2,
		"SOURING_MASH":   3,
		"SOURING_WORT":   4,
		"DRAIN_MASH_TUN": 5,
		"SPARGE":         6,
	}
)

func (x MashStepType_MashStepTypeType) Enum() *MashStepType_MashStepTypeType {
	p := new(MashStepType_MashStepTypeType)
	*p = x
	return p
}

func (x MashStepType_MashStepTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MashStepType_MashStepTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[0].Descriptor()
}

func (MashStepType_MashStepTypeType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[0]
}

func (x MashStepType_MashStepTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MashStepType_MashStepTypeType.Descriptor instead.
func (MashStepType_MashStepTypeType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{2, 0}
}

type TimeType_TimeUnitType int32

const (
	// sec
	TimeType_SEC TimeType_TimeUnitType = 0
	// min
	TimeType_MIN TimeType_TimeUnitType = 1
	// hr
	TimeType_HR TimeType_TimeUnitType = 2
	// day
	TimeType_DAY TimeType_TimeUnitType = 3
	// week
	TimeType_WEEK TimeType_TimeUnitType = 4
	// month
	TimeType_MONTH TimeType_TimeUnitType = 5
	// year
	TimeType_YEAR TimeType_TimeUnitType = 6
)

// Enum value maps for TimeType_TimeUnitType.
var (
	TimeType_TimeUnitType_name = map[int32]string{
		0: "SEC",
		1: "MIN",
		2: "HR",
		3: "DAY",
		4: "WEEK",
		5: "MONTH",
		6: "YEAR",
	}
	TimeType_TimeUnitType_value = map[string]int32{
		"SEC":   0,
		"MIN":   1,
		"HR":    2,
		"DAY":   3,
		"WEEK":  4,
		"MONTH": 5,
		"YEAR":  6,
	}
)

func (x TimeType_TimeUnitType) Enum() *TimeType_TimeUnitType {
	p := new(TimeType_TimeUnitType)
	*p = x
	return p
}

func (x TimeType_TimeUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeType_TimeUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[1].Descriptor()
}

func (TimeType_TimeUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[1]
}

func (x TimeType_TimeUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeType_TimeUnitType.Descriptor instead.
func (TimeType_TimeUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{3, 0}
}

type AcidityType_AcidityUnitType int32

const (
	AcidityType_PH AcidityType_AcidityUnitType = 0
)

// Enum value maps for AcidityType_AcidityUnitType.
var (
	AcidityType_AcidityUnitType_name = map[int32]string{
		0: "PH",
	}
	AcidityType_AcidityUnitType_value = map[string]int32{
		"PH": 0,
	}
)

func (x AcidityType_AcidityUnitType) Enum() *AcidityType_AcidityUnitType {
	p := new(AcidityType_AcidityUnitType)
	*p = x
	return p
}

func (x AcidityType_AcidityUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcidityType_AcidityUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[2].Descriptor()
}

func (AcidityType_AcidityUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[2]
}

func (x AcidityType_AcidityUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcidityType_AcidityUnitType.Descriptor instead.
func (AcidityType_AcidityUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{4, 0}
}

type VolumeType_VolumeUnitType int32

const (
	// ml
	VolumeType_ML VolumeType_VolumeUnitType = 0
	// l
	VolumeType_L VolumeType_VolumeUnitType = 1
	// tsp
	VolumeType_TSP VolumeType_VolumeUnitType = 2
	// tbsp
	VolumeType_TBSP VolumeType_VolumeUnitType = 3
	// floz
	VolumeType_FLOZ VolumeType_VolumeUnitType = 4
	// cup
	VolumeType_CUP VolumeType_VolumeUnitType = 5
	// pt
	VolumeType_PT VolumeType_VolumeUnitType = 6
	// qt
	VolumeType_QT VolumeType_VolumeUnitType = 7
	// gal
	VolumeType_GAL VolumeType_VolumeUnitType = 8
	// bbl
	VolumeType_BBL VolumeType_VolumeUnitType = 9
	// ifloz
	VolumeType_IFOZ VolumeType_VolumeUnitType = 10
	// ipt
	VolumeType_IPT VolumeType_VolumeUnitType = 11
	// iqt
	VolumeType_IQT VolumeType_VolumeUnitType = 12
	// igal
	VolumeType_IGAL VolumeType_VolumeUnitType = 13
	// ibbl
	VolumeType_IBBL VolumeType_VolumeUnitType = 14
)

// Enum value maps for VolumeType_VolumeUnitType.
var (
	VolumeType_VolumeUnitType_name = map[int32]string{
		0:  "ML",
		1:  "L",
		2:  "TSP",
		3:  "TBSP",
		4:  "FLOZ",
		5:  "CUP",
		6:  "PT",
		7:  "QT",
		8:  "GAL",
		9:  "BBL",
		10: "IFOZ",
		11: "IPT",
		12: "IQT",
		13: "IGAL",
		14: "IBBL",
	}
	VolumeType_VolumeUnitType_value = map[string]int32{
		"ML":   0,
		"L":    1,
		"TSP":  2,
		"TBSP": 3,
		"FLOZ": 4,
		"CUP":  5,
		"PT":   6,
		"QT":   7,
		"GAL":  8,
		"BBL":  9,
		"IFOZ": 10,
		"IPT":  11,
		"IQT":  12,
		"IGAL": 13,
		"IBBL": 14,
	}
)

func (x VolumeType_VolumeUnitType) Enum() *VolumeType_VolumeUnitType {
	p := new(VolumeType_VolumeUnitType)
	*p = x
	return p
}

func (x VolumeType_VolumeUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeType_VolumeUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[3].Descriptor()
}

func (VolumeType_VolumeUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[3]
}

func (x VolumeType_VolumeUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeType_VolumeUnitType.Descriptor instead.
func (VolumeType_VolumeUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{5, 0}
}

type SpecificVolumeType_SpecificVolumeUnitType int32

const (
	// qt/lb
	SpecificVolumeType_QTLB SpecificVolumeType_SpecificVolumeUnitType = 0
	// gal/lb
	SpecificVolumeType_GALLB SpecificVolumeType_SpecificVolumeUnitType = 1
	// gal/oz
	SpecificVolumeType_GALOZ SpecificVolumeType_SpecificVolumeUnitType = 2
	// l/g
	SpecificVolumeType_LG SpecificVolumeType_SpecificVolumeUnitType = 3
	// l/kg
	SpecificVolumeType_LKG SpecificVolumeType_SpecificVolumeUnitType = 4
	// floz/oz
	SpecificVolumeType_FLOZOZ SpecificVolumeType_SpecificVolumeUnitType = 5
	// m^3/kg
	SpecificVolumeType_M3KG SpecificVolumeType_SpecificVolumeUnitType = 6
	// ft^3/lb
	SpecificVolumeType_FT3LB SpecificVolumeType_SpecificVolumeUnitType = 7
)

// Enum value maps for SpecificVolumeType_SpecificVolumeUnitType.
var (
	SpecificVolumeType_SpecificVolumeUnitType_name = map[int32]string{
		0: "QTLB",
		1: "GALLB",
		2: "GALOZ",
		3: "LG",
		4: "LKG",
		5: "FLOZOZ",
		6: "M3KG",
		7: "FT3LB",
	}
	SpecificVolumeType_SpecificVolumeUnitType_value = map[string]int32{
		"QTLB":   0,
		"GALLB":  1,
		"GALOZ":  2,
		"LG":     3,
		"LKG":    4,
		"FLOZOZ": 5,
		"M3KG":   6,
		"FT3LB":  7,
	}
)

func (x SpecificVolumeType_SpecificVolumeUnitType) Enum() *SpecificVolumeType_SpecificVolumeUnitType {
	p := new(SpecificVolumeType_SpecificVolumeUnitType)
	*p = x
	return p
}

func (x SpecificVolumeType_SpecificVolumeUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificVolumeType_SpecificVolumeUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[4].Descriptor()
}

func (SpecificVolumeType_SpecificVolumeUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[4]
}

func (x SpecificVolumeType_SpecificVolumeUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificVolumeType_SpecificVolumeUnitType.Descriptor instead.
func (SpecificVolumeType_SpecificVolumeUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{6, 0}
}

type RecipeType_RecipeTypeType int32

const (
	// cider
	RecipeType_CIDER RecipeType_RecipeTypeType = 0
	// kombucha
	RecipeType_KOMBUCHA RecipeType_RecipeTypeType = 1
	// soda
	RecipeType_SODA RecipeType_RecipeTypeType = 2
	// other
	RecipeType_OTHER RecipeType_RecipeTypeType = 3
	// mead
	RecipeType_MEAD RecipeType_RecipeTypeType = 4
	// wine
	RecipeType_WINE RecipeType_RecipeTypeType = 5
	// extract
	RecipeType_EXTRACT RecipeType_RecipeTypeType = 6
	// partial mash
	RecipeType_PARTIAL_MASH RecipeType_RecipeTypeType = 7
	// all grain
	RecipeType_ALL_GRAIN RecipeType_RecipeTypeType = 8
)

// Enum value maps for RecipeType_RecipeTypeType.
var (
	RecipeType_RecipeTypeType_name = map[int32]string{
		0: "CIDER",
		1: "KOMBUCHA",
		2: "SODA",
		3: "OTHER",
		4: "MEAD",
		5: "WINE",
		6: "EXTRACT",
		7: "PARTIAL_MASH",
		8: "ALL_GRAIN",
	}
	RecipeType_RecipeTypeType_value = map[string]int32{
		"CIDER":        0,
		"KOMBUCHA":     1,
		"SODA":         2,
		"OTHER":        3,
		"MEAD":         4,
		"WINE":         5,
		"EXTRACT":      6,
		"PARTIAL_MASH": 7,
		"ALL_GRAIN":    8,
	}
)

func (x RecipeType_RecipeTypeType) Enum() *RecipeType_RecipeTypeType {
	p := new(RecipeType_RecipeTypeType)
	*p = x
	return p
}

func (x RecipeType_RecipeTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeType_RecipeTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[5].Descriptor()
}

func (RecipeType_RecipeTypeType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[5]
}

func (x RecipeType_RecipeTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeType_RecipeTypeType.Descriptor instead.
func (RecipeType_RecipeTypeType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{7, 0}
}

type RecipeStyleType_StyleCategories int32

const (
	// beer
	RecipeStyleType_BEER RecipeStyleType_StyleCategories = 0
	// cider
	RecipeStyleType_cider RecipeStyleType_StyleCategories = 1
	// kombucha
	RecipeStyleType_OMBUCHA RecipeStyleType_StyleCategories = 2
	// mead
	RecipeStyleType_MEAD RecipeStyleType_StyleCategories = 3
	// soda
	RecipeStyleType_SODA RecipeStyleType_StyleCategories = 4
	// wine
	RecipeStyleType_WINE RecipeStyleType_StyleCategories = 5
	// other
	RecipeStyleType_OTHER RecipeStyleType_StyleCategories = 6
)

// Enum value maps for RecipeStyleType_StyleCategories.
var (
	RecipeStyleType_StyleCategories_name = map[int32]string{
		0: "BEER",
		1: "cider",
		2: "OMBUCHA",
		3: "MEAD",
		4: "SODA",
		5: "WINE",
		6: "OTHER",
	}
	RecipeStyleType_StyleCategories_value = map[string]int32{
		"BEER":    0,
		"cider":   1,
		"OMBUCHA": 2,
		"MEAD":    3,
		"SODA":    4,
		"WINE":    5,
		"OTHER":   6,
	}
)

func (x RecipeStyleType_StyleCategories) Enum() *RecipeStyleType_StyleCategories {
	p := new(RecipeStyleType_StyleCategories)
	*p = x
	return p
}

func (x RecipeStyleType_StyleCategories) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeStyleType_StyleCategories) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[6].Descriptor()
}

func (RecipeStyleType_StyleCategories) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[6]
}

func (x RecipeStyleType_StyleCategories) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeStyleType_StyleCategories.Descriptor instead.
func (RecipeStyleType_StyleCategories) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{9, 0}
}

type IBUEstimateType_IBUMethodType int32

const (
	// Rager
	IBUEstimateType_Rager IBUEstimateType_IBUMethodType = 0
	// Tinseth
	IBUEstimateType_Tinseth IBUEstimateType_IBUMethodType = 1
	// Garetz
	IBUEstimateType_Garetz IBUEstimateType_IBUMethodType = 2
	// Other
	IBUEstimateType_Other IBUEstimateType_IBUMethodType = 3
)

// Enum value maps for IBUEstimateType_IBUMethodType.
var (
	IBUEstimateType_IBUMethodType_name = map[int32]string{
		0: "Rager",
		1: "Tinseth",
		2: "Garetz",
		3: "Other",
	}
	IBUEstimateType_IBUMethodType_value = map[string]int32{
		"Rager":   0,
		"Tinseth": 1,
		"Garetz":  2,
		"Other":   3,
	}
)

func (x IBUEstimateType_IBUMethodType) Enum() *IBUEstimateType_IBUMethodType {
	p := new(IBUEstimateType_IBUMethodType)
	*p = x
	return p
}

func (x IBUEstimateType_IBUMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IBUEstimateType_IBUMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[7].Descriptor()
}

func (IBUEstimateType_IBUMethodType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[7]
}

func (x IBUEstimateType_IBUMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IBUEstimateType_IBUMethodType.Descriptor instead.
func (IBUEstimateType_IBUMethodType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{10, 0}
}

type MiscellaneousAdditionType_MiscellaneousBaseType int32

const (
	// spice
	MiscellaneousAdditionType_SPICE MiscellaneousAdditionType_MiscellaneousBaseType = 0
	// fining
	MiscellaneousAdditionType_FINING MiscellaneousAdditionType_MiscellaneousBaseType = 1
	// water agent
	MiscellaneousAdditionType_WATER_AGENT MiscellaneousAdditionType_MiscellaneousBaseType = 2
	// herb
	MiscellaneousAdditionType_HERB MiscellaneousAdditionType_MiscellaneousBaseType = 3
	// flavor
	MiscellaneousAdditionType_FLAVOR MiscellaneousAdditionType_MiscellaneousBaseType = 4
	// wood
	MiscellaneousAdditionType_WOOD MiscellaneousAdditionType_MiscellaneousBaseType = 5
	// other
	MiscellaneousAdditionType_OTHER MiscellaneousAdditionType_MiscellaneousBaseType = 6
)

// Enum value maps for MiscellaneousAdditionType_MiscellaneousBaseType.
var (
	MiscellaneousAdditionType_MiscellaneousBaseType_name = map[int32]string{
		0: "SPICE",
		1: "FINING",
		2: "WATER_AGENT",
		3: "HERB",
		4: "FLAVOR",
		5: "WOOD",
		6: "OTHER",
	}
	MiscellaneousAdditionType_MiscellaneousBaseType_value = map[string]int32{
		"SPICE":       0,
		"FINING":      1,
		"WATER_AGENT": 2,
		"HERB":        3,
		"FLAVOR":      4,
		"WOOD":        5,
		"OTHER":       6,
	}
)

func (x MiscellaneousAdditionType_MiscellaneousBaseType) Enum() *MiscellaneousAdditionType_MiscellaneousBaseType {
	p := new(MiscellaneousAdditionType_MiscellaneousBaseType)
	*p = x
	return p
}

func (x MiscellaneousAdditionType_MiscellaneousBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiscellaneousAdditionType_MiscellaneousBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[8].Descriptor()
}

func (MiscellaneousAdditionType_MiscellaneousBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[8]
}

func (x MiscellaneousAdditionType_MiscellaneousBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MiscellaneousAdditionType_MiscellaneousBaseType.Descriptor instead.
func (MiscellaneousAdditionType_MiscellaneousBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{12, 0}
}

type MassType_MassUnitType int32

const (
	// mg
	MassType_MG MassType_MassUnitType = 0
	// g
	MassType_G MassType_MassUnitType = 1
	// kg
	MassType_KG MassType_MassUnitType = 2
	// lb
	MassType_LB MassType_MassUnitType = 3
	// oz
	MassType_OZ MassType_MassUnitType = 4
)

// Enum value maps for MassType_MassUnitType.
var (
	MassType_MassUnitType_name = map[int32]string{
		0: "MG",
		1: "G",
		2: "KG",
		3: "LB",
		4: "OZ",
	}
	MassType_MassUnitType_value = map[string]int32{
		"MG": 0,
		"G":  1,
		"KG": 2,
		"LB": 3,
		"OZ": 4,
	}
)

func (x MassType_MassUnitType) Enum() *MassType_MassUnitType {
	p := new(MassType_MassUnitType)
	*p = x
	return p
}

func (x MassType_MassUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MassType_MassUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[9].Descriptor()
}

func (MassType_MassUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[9]
}

func (x MassType_MassUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MassType_MassUnitType.Descriptor instead.
func (MassType_MassUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{13, 0}
}

type UnitType_UnitUnitType int32

const (
	// 1
	UnitType_ONE UnitType_UnitUnitType = 0
	// unit
	UnitType_UNIT UnitType_UnitUnitType = 1
	// each
	UnitType_EACH UnitType_UnitUnitType = 2
	// dimensionless
	UnitType_DIMENSIONLESS UnitType_UnitUnitType = 3
	// pkg
	UnitType_PKG UnitType_UnitUnitType = 4
)

// Enum value maps for UnitType_UnitUnitType.
var (
	UnitType_UnitUnitType_name = map[int32]string{
		0: "ONE",
		1: "UNIT",
		2: "EACH",
		3: "DIMENSIONLESS",
		4: "PKG",
	}
	UnitType_UnitUnitType_value = map[string]int32{
		"ONE":           0,
		"UNIT":          1,
		"EACH":          2,
		"DIMENSIONLESS": 3,
		"PKG":           4,
	}
)

func (x UnitType_UnitUnitType) Enum() *UnitType_UnitUnitType {
	p := new(UnitType_UnitUnitType)
	*p = x
	return p
}

func (x UnitType_UnitUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitType_UnitUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[10].Descriptor()
}

func (UnitType_UnitUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[10]
}

func (x UnitType_UnitUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitType_UnitUnitType.Descriptor instead.
func (UnitType_UnitUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{14, 0}
}

type CultureAdditionType_CultureBaseForm int32

const (
	// liquid
	CultureAdditionType_LIQUID CultureAdditionType_CultureBaseForm = 0
	// dry
	CultureAdditionType_DRY CultureAdditionType_CultureBaseForm = 1
	// slant
	CultureAdditionType_SLANT CultureAdditionType_CultureBaseForm = 2
	// culture
	CultureAdditionType_CULTURE CultureAdditionType_CultureBaseForm = 3
	// dregs
	CultureAdditionType_DREGS CultureAdditionType_CultureBaseForm = 4
)

// Enum value maps for CultureAdditionType_CultureBaseForm.
var (
	CultureAdditionType_CultureBaseForm_name = map[int32]string{
		0: "LIQUID",
		1: "DRY",
		2: "SLANT",
		3: "CULTURE",
		4: "DREGS",
	}
	CultureAdditionType_CultureBaseForm_value = map[string]int32{
		"LIQUID":  0,
		"DRY":     1,
		"SLANT":   2,
		"CULTURE": 3,
		"DREGS":   4,
	}
)

func (x CultureAdditionType_CultureBaseForm) Enum() *CultureAdditionType_CultureBaseForm {
	p := new(CultureAdditionType_CultureBaseForm)
	*p = x
	return p
}

func (x CultureAdditionType_CultureBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CultureAdditionType_CultureBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[11].Descriptor()
}

func (CultureAdditionType_CultureBaseForm) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[11]
}

func (x CultureAdditionType_CultureBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CultureAdditionType_CultureBaseForm.Descriptor instead.
func (CultureAdditionType_CultureBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{15, 0}
}

type CultureAdditionType_CultureBaseType int32

const (
	// ale
	CultureAdditionType_ALE CultureAdditionType_CultureBaseType = 0
	// bacteria
	CultureAdditionType_BACTERIA CultureAdditionType_CultureBaseType = 1
	// brett
	CultureAdditionType_BRETT CultureAdditionType_CultureBaseType = 2
	// champagne
	CultureAdditionType_CHAMPAGNE CultureAdditionType_CultureBaseType = 3
	// kveik
	CultureAdditionType_KVEIK CultureAdditionType_CultureBaseType = 4
	// lacto
	CultureAdditionType_LACTO CultureAdditionType_CultureBaseType = 5
	// lager
	CultureAdditionType_LAGER CultureAdditionType_CultureBaseType = 6
	// malolactic
	CultureAdditionType_MALOLACTIC CultureAdditionType_CultureBaseType = 7
	// mixed-culture
	CultureAdditionType_MIXED_CULTURE CultureAdditionType_CultureBaseType = 8
	// other
	CultureAdditionType_OTHER CultureAdditionType_CultureBaseType = 9
	// pedio
	CultureAdditionType_PEDIO CultureAdditionType_CultureBaseType = 10
	// spontaneous
	CultureAdditionType_SPONTANEOUS CultureAdditionType_CultureBaseType = 11
	// wine
	CultureAdditionType_WINE CultureAdditionType_CultureBaseType = 12
)

// Enum value maps for CultureAdditionType_CultureBaseType.
var (
	CultureAdditionType_CultureBaseType_name = map[int32]string{
		0:  "ALE",
		1:  "BACTERIA",
		2:  "BRETT",
		3:  "CHAMPAGNE",
		4:  "KVEIK",
		5:  "LACTO",
		6:  "LAGER",
		7:  "MALOLACTIC",
		8:  "MIXED_CULTURE",
		9:  "OTHER",
		10: "PEDIO",
		11: "SPONTANEOUS",
		12: "WINE",
	}
	CultureAdditionType_CultureBaseType_value = map[string]int32{
		"ALE":           0,
		"BACTERIA":      1,
		"BRETT":         2,
		"CHAMPAGNE":     3,
		"KVEIK":         4,
		"LACTO":         5,
		"LAGER":         6,
		"MALOLACTIC":    7,
		"MIXED_CULTURE": 8,
		"OTHER":         9,
		"PEDIO":         10,
		"SPONTANEOUS":   11,
		"WINE":          12,
	}
)

func (x CultureAdditionType_CultureBaseType) Enum() *CultureAdditionType_CultureBaseType {
	p := new(CultureAdditionType_CultureBaseType)
	*p = x
	return p
}

func (x CultureAdditionType_CultureBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CultureAdditionType_CultureBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[12].Descriptor()
}

func (CultureAdditionType_CultureBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[12]
}

func (x CultureAdditionType_CultureBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CultureAdditionType_CultureBaseType.Descriptor instead.
func (CultureAdditionType_CultureBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{15, 1}
}

type TimingType_UseType int32

const (
	// add to mash
	TimingType_ADD_TO_MASH TimingType_UseType = 0
	// add to boil
	TimingType_ADD_TO_BOIL TimingType_UseType = 1
	// add to fermentation
	TimingType_ADD_TO_FERMENTATION TimingType_UseType = 2
	// add to package
	TimingType_ADD_TO_PACKAGE TimingType_UseType = 3
)

// Enum value maps for TimingType_UseType.
var (
	TimingType_UseType_name = map[int32]string{
		0: "ADD_TO_MASH",
		1: "ADD_TO_BOIL",
		2: "ADD_TO_FERMENTATION",
		3: "ADD_TO_PACKAGE",
	}
	TimingType_UseType_value = map[string]int32{
		"ADD_TO_MASH":         0,
		"ADD_TO_BOIL":         1,
		"ADD_TO_FERMENTATION": 2,
		"ADD_TO_PACKAGE":      3,
	}
)

func (x TimingType_UseType) Enum() *TimingType_UseType {
	p := new(TimingType_UseType)
	*p = x
	return p
}

func (x TimingType_UseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimingType_UseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[13].Descriptor()
}

func (TimingType_UseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[13]
}

func (x TimingType_UseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimingType_UseType.Descriptor instead.
func (TimingType_UseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{16, 0}
}

type ConcentrationType_ConcentrationUnitType int32

const (
	// ppm
	ConcentrationType_PPM ConcentrationType_ConcentrationUnitType = 0
	// ppb
	ConcentrationType_PPB ConcentrationType_ConcentrationUnitType = 1
	// mg/l
	ConcentrationType_MGL ConcentrationType_ConcentrationUnitType = 2
)

// Enum value maps for ConcentrationType_ConcentrationUnitType.
var (
	ConcentrationType_ConcentrationUnitType_name = map[int32]string{
		0: "PPM",
		1: "PPB",
		2: "MGL",
	}
	ConcentrationType_ConcentrationUnitType_value = map[string]int32{
		"PPM": 0,
		"PPB": 1,
		"MGL": 2,
	}
)

func (x ConcentrationType_ConcentrationUnitType) Enum() *ConcentrationType_ConcentrationUnitType {
	p := new(ConcentrationType_ConcentrationUnitType)
	*p = x
	return p
}

func (x ConcentrationType_ConcentrationUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConcentrationType_ConcentrationUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[14].Descriptor()
}

func (ConcentrationType_ConcentrationUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[14]
}

func (x ConcentrationType_ConcentrationUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConcentrationType_ConcentrationUnitType.Descriptor instead.
func (ConcentrationType_ConcentrationUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{18, 0}
}

type FermentableAdditionType_FermentableBaseType int32

const (
	//dry extract
	FermentableAdditionType_DRY_EXTRACT FermentableAdditionType_FermentableBaseType = 0
	// extract
	FermentableAdditionType_EXTRACT FermentableAdditionType_FermentableBaseType = 1
	// grain
	FermentableAdditionType_GRAIN FermentableAdditionType_FermentableBaseType = 2
	// sugar
	FermentableAdditionType_SUGAR FermentableAdditionType_FermentableBaseType = 3
	// fruit
	FermentableAdditionType_FRUIT FermentableAdditionType_FermentableBaseType = 4
	// juice
	FermentableAdditionType_JUICE FermentableAdditionType_FermentableBaseType = 5
	// honey
	FermentableAdditionType_HONEY FermentableAdditionType_FermentableBaseType = 6
	// other
	FermentableAdditionType_OTHER FermentableAdditionType_FermentableBaseType = 7
)

// Enum value maps for FermentableAdditionType_FermentableBaseType.
var (
	FermentableAdditionType_FermentableBaseType_name = map[int32]string{
		0: "DRY_EXTRACT",
		1: "EXTRACT",
		2: "GRAIN",
		3: "SUGAR",
		4: "FRUIT",
		5: "JUICE",
		6: "HONEY",
		7: "OTHER",
	}
	FermentableAdditionType_FermentableBaseType_value = map[string]int32{
		"DRY_EXTRACT": 0,
		"EXTRACT":     1,
		"GRAIN":       2,
		"SUGAR":       3,
		"FRUIT":       4,
		"JUICE":       5,
		"HONEY":       6,
		"OTHER":       7,
	}
)

func (x FermentableAdditionType_FermentableBaseType) Enum() *FermentableAdditionType_FermentableBaseType {
	p := new(FermentableAdditionType_FermentableBaseType)
	*p = x
	return p
}

func (x FermentableAdditionType_FermentableBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FermentableAdditionType_FermentableBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[15].Descriptor()
}

func (FermentableAdditionType_FermentableBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[15]
}

func (x FermentableAdditionType_FermentableBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FermentableAdditionType_FermentableBaseType.Descriptor instead.
func (FermentableAdditionType_FermentableBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{19, 0}
}

type FermentableAdditionType_FermentableBaseGrainGroup int32

const (
	// base
	FermentableAdditionType_BASE FermentableAdditionType_FermentableBaseGrainGroup = 0
	// caramel
	FermentableAdditionType_CARAMEL FermentableAdditionType_FermentableBaseGrainGroup = 1
	// flaked
	FermentableAdditionType_FLAKED FermentableAdditionType_FermentableBaseGrainGroup = 2
	// roasted
	FermentableAdditionType_ROASTED FermentableAdditionType_FermentableBaseGrainGroup = 3
	// specialty
	FermentableAdditionType_SPECIALTY FermentableAdditionType_FermentableBaseGrainGroup = 4
	// smoked
	FermentableAdditionType_SMOKED FermentableAdditionType_FermentableBaseGrainGroup = 5
	// adjunct
	FermentableAdditionType_ADJUNCT FermentableAdditionType_FermentableBaseGrainGroup = 6
)

// Enum value maps for FermentableAdditionType_FermentableBaseGrainGroup.
var (
	FermentableAdditionType_FermentableBaseGrainGroup_name = map[int32]string{
		0: "BASE",
		1: "CARAMEL",
		2: "FLAKED",
		3: "ROASTED",
		4: "SPECIALTY",
		5: "SMOKED",
		6: "ADJUNCT",
	}
	FermentableAdditionType_FermentableBaseGrainGroup_value = map[string]int32{
		"BASE":      0,
		"CARAMEL":   1,
		"FLAKED":    2,
		"ROASTED":   3,
		"SPECIALTY": 4,
		"SMOKED":    5,
		"ADJUNCT":   6,
	}
)

func (x FermentableAdditionType_FermentableBaseGrainGroup) Enum() *FermentableAdditionType_FermentableBaseGrainGroup {
	p := new(FermentableAdditionType_FermentableBaseGrainGroup)
	*p = x
	return p
}

func (x FermentableAdditionType_FermentableBaseGrainGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FermentableAdditionType_FermentableBaseGrainGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[16].Descriptor()
}

func (FermentableAdditionType_FermentableBaseGrainGroup) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[16]
}

func (x FermentableAdditionType_FermentableBaseGrainGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FermentableAdditionType_FermentableBaseGrainGroup.Descriptor instead.
func (FermentableAdditionType_FermentableBaseGrainGroup) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{19, 1}
}

type HopAdditionType_HopVarietyBaseForm int32

const (
	// extract
	HopAdditionType_EXTRACT HopAdditionType_HopVarietyBaseForm = 0
	// leaf
	HopAdditionType_LEAF HopAdditionType_HopVarietyBaseForm = 1
	// leaf (wet)
	HopAdditionType_LEAF_WET HopAdditionType_HopVarietyBaseForm = 2
	// pellet
	HopAdditionType_PELLET HopAdditionType_HopVarietyBaseForm = 3
	// powder
	HopAdditionType_POWDER HopAdditionType_HopVarietyBaseForm = 4
	// plug
	HopAdditionType_PLUG HopAdditionType_HopVarietyBaseForm = 5
)

// Enum value maps for HopAdditionType_HopVarietyBaseForm.
var (
	HopAdditionType_HopVarietyBaseForm_name = map[int32]string{
		0: "EXTRACT",
		1: "LEAF",
		2: "LEAF_WET",
		3: "PELLET",
		4: "POWDER",
		5: "PLUG",
	}
	HopAdditionType_HopVarietyBaseForm_value = map[string]int32{
		"EXTRACT":  0,
		"LEAF":     1,
		"LEAF_WET": 2,
		"PELLET":   3,
		"POWDER":   4,
		"PLUG":     5,
	}
)

func (x HopAdditionType_HopVarietyBaseForm) Enum() *HopAdditionType_HopVarietyBaseForm {
	p := new(HopAdditionType_HopVarietyBaseForm)
	*p = x
	return p
}

func (x HopAdditionType_HopVarietyBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HopAdditionType_HopVarietyBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[17].Descriptor()
}

func (HopAdditionType_HopVarietyBaseForm) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[17]
}

func (x HopAdditionType_HopVarietyBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HopAdditionType_HopVarietyBaseForm.Descriptor instead.
func (HopAdditionType_HopVarietyBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{21, 0}
}

type MiscellaneousType_MiscellaneousBaseType int32

const (
	// spice
	MiscellaneousType_SPICE MiscellaneousType_MiscellaneousBaseType = 0
	// fining
	MiscellaneousType_FINING MiscellaneousType_MiscellaneousBaseType = 1
	// water agent
	MiscellaneousType_WATER_AGENT MiscellaneousType_MiscellaneousBaseType = 2
	// herb
	MiscellaneousType_HERB MiscellaneousType_MiscellaneousBaseType = 3
	// flavor
	MiscellaneousType_FLAVOR MiscellaneousType_MiscellaneousBaseType = 4
	// wood
	MiscellaneousType_WOOD MiscellaneousType_MiscellaneousBaseType = 5
	// other
	MiscellaneousType_OTHER MiscellaneousType_MiscellaneousBaseType = 6
)

// Enum value maps for MiscellaneousType_MiscellaneousBaseType.
var (
	MiscellaneousType_MiscellaneousBaseType_name = map[int32]string{
		0: "SPICE",
		1: "FINING",
		2: "WATER_AGENT",
		3: "HERB",
		4: "FLAVOR",
		5: "WOOD",
		6: "OTHER",
	}
	MiscellaneousType_MiscellaneousBaseType_value = map[string]int32{
		"SPICE":       0,
		"FINING":      1,
		"WATER_AGENT": 2,
		"HERB":        3,
		"FLAVOR":      4,
		"WOOD":        5,
		"OTHER":       6,
	}
)

func (x MiscellaneousType_MiscellaneousBaseType) Enum() *MiscellaneousType_MiscellaneousBaseType {
	p := new(MiscellaneousType_MiscellaneousBaseType)
	*p = x
	return p
}

func (x MiscellaneousType_MiscellaneousBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiscellaneousType_MiscellaneousBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[18].Descriptor()
}

func (MiscellaneousType_MiscellaneousBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[18]
}

func (x MiscellaneousType_MiscellaneousBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MiscellaneousType_MiscellaneousBaseType.Descriptor instead.
func (MiscellaneousType_MiscellaneousBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{23, 0}
}

type StyleType_StyleCategories int32

const (
	// beer
	StyleType_BEER StyleType_StyleCategories = 0
	// cider
	StyleType_CIDER StyleType_StyleCategories = 1
	// kombucha
	StyleType_KOMBUCHA StyleType_StyleCategories = 2
	// mead
	StyleType_MEAD StyleType_StyleCategories = 3
	// other
	StyleType_OTHER StyleType_StyleCategories = 4
	// soda
	StyleType_SODA StyleType_StyleCategories = 5
	// wine
	StyleType_WINE StyleType_StyleCategories = 6
)

// Enum value maps for StyleType_StyleCategories.
var (
	StyleType_StyleCategories_name = map[int32]string{
		0: "BEER",
		1: "CIDER",
		2: "KOMBUCHA",
		3: "MEAD",
		4: "OTHER",
		5: "SODA",
		6: "WINE",
	}
	StyleType_StyleCategories_value = map[string]int32{
		"BEER":     0,
		"CIDER":    1,
		"KOMBUCHA": 2,
		"MEAD":     3,
		"OTHER":    4,
		"SODA":     5,
		"WINE":     6,
	}
)

func (x StyleType_StyleCategories) Enum() *StyleType_StyleCategories {
	p := new(StyleType_StyleCategories)
	*p = x
	return p
}

func (x StyleType_StyleCategories) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StyleType_StyleCategories) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[19].Descriptor()
}

func (StyleType_StyleCategories) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[19]
}

func (x StyleType_StyleCategories) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StyleType_StyleCategories.Descriptor instead.
func (StyleType_StyleCategories) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{25, 0}
}

type BitternessType_BitternessUnitType int32

const (
	// IBUs
	BitternessType_IBUs BitternessType_BitternessUnitType = 0
)

// Enum value maps for BitternessType_BitternessUnitType.
var (
	BitternessType_BitternessUnitType_name = map[int32]string{
		0: "IBUs",
	}
	BitternessType_BitternessUnitType_value = map[string]int32{
		"IBUs": 0,
	}
)

func (x BitternessType_BitternessUnitType) Enum() *BitternessType_BitternessUnitType {
	p := new(BitternessType_BitternessUnitType)
	*p = x
	return p
}

func (x BitternessType_BitternessUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitternessType_BitternessUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[20].Descriptor()
}

func (BitternessType_BitternessUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[20]
}

func (x BitternessType_BitternessUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitternessType_BitternessUnitType.Descriptor instead.
func (BitternessType_BitternessUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{27, 0}
}

type PercentType_PercentUnitType int32

const (
	// %
	PercentType_PERCENT_SIGN PercentType_PercentUnitType = 0
)

// Enum value maps for PercentType_PercentUnitType.
var (
	PercentType_PercentUnitType_name = map[int32]string{
		0: "PERCENT_SIGN",
	}
	PercentType_PercentUnitType_value = map[string]int32{
		"PERCENT_SIGN": 0,
	}
)

func (x PercentType_PercentUnitType) Enum() *PercentType_PercentUnitType {
	p := new(PercentType_PercentUnitType)
	*p = x
	return p
}

func (x PercentType_PercentUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PercentType_PercentUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[21].Descriptor()
}

func (PercentType_PercentUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[21]
}

func (x PercentType_PercentUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PercentType_PercentUnitType.Descriptor instead.
func (PercentType_PercentUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{29, 0}
}

type GravityType_GravityUnitType int32

const (
	// sg
	GravityType_SG GravityType_GravityUnitType = 0
	// plato
	GravityType_PLATO GravityType_GravityUnitType = 1
	// brix
	GravityType_BRIX GravityType_GravityUnitType = 2
)

// Enum value maps for GravityType_GravityUnitType.
var (
	GravityType_GravityUnitType_name = map[int32]string{
		0: "SG",
		1: "PLATO",
		2: "BRIX",
	}
	GravityType_GravityUnitType_value = map[string]int32{
		"SG":    0,
		"PLATO": 1,
		"BRIX":  2,
	}
)

func (x GravityType_GravityUnitType) Enum() *GravityType_GravityUnitType {
	p := new(GravityType_GravityUnitType)
	*p = x
	return p
}

func (x GravityType_GravityUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GravityType_GravityUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[22].Descriptor()
}

func (GravityType_GravityUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[22]
}

func (x GravityType_GravityUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GravityType_GravityUnitType.Descriptor instead.
func (GravityType_GravityUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{31, 0}
}

type ColorType_ColorUnitType int32

const (
	// EBC
	ColorType_EBC ColorType_ColorUnitType = 0
	// Lovi
	ColorType_LOVI ColorType_ColorUnitType = 1
	// SRM
	ColorType_SRM ColorType_ColorUnitType = 2
)

// Enum value maps for ColorType_ColorUnitType.
var (
	ColorType_ColorUnitType_name = map[int32]string{
		0: "EBC",
		1: "LOVI",
		2: "SRM",
	}
	ColorType_ColorUnitType_value = map[string]int32{
		"EBC":  0,
		"LOVI": 1,
		"SRM":  2,
	}
)

func (x ColorType_ColorUnitType) Enum() *ColorType_ColorUnitType {
	p := new(ColorType_ColorUnitType)
	*p = x
	return p
}

func (x ColorType_ColorUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorType_ColorUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[23].Descriptor()
}

func (ColorType_ColorUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[23]
}

func (x ColorType_ColorUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorType_ColorUnitType.Descriptor instead.
func (ColorType_ColorUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{33, 0}
}

type CarbonationType_CarbonationUnitType int32

const (
	// vols
	CarbonationType_VOLS CarbonationType_CarbonationUnitType = 0
)

// Enum value maps for CarbonationType_CarbonationUnitType.
var (
	CarbonationType_CarbonationUnitType_name = map[int32]string{
		0: "VOLS",
	}
	CarbonationType_CarbonationUnitType_value = map[string]int32{
		"VOLS": 0,
	}
)

func (x CarbonationType_CarbonationUnitType) Enum() *CarbonationType_CarbonationUnitType {
	p := new(CarbonationType_CarbonationUnitType)
	*p = x
	return p
}

func (x CarbonationType_CarbonationUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarbonationType_CarbonationUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[24].Descriptor()
}

func (CarbonationType_CarbonationUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[24]
}

func (x CarbonationType_CarbonationUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarbonationType_CarbonationUnitType.Descriptor instead.
func (CarbonationType_CarbonationUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{35, 0}
}

type BoilStepType_BoilStepTypeChillingType int32

const (
	// batch
	BoilStepType_BATCH BoilStepType_BoilStepTypeChillingType = 0
	// inline
	BoilStepType_INLINE BoilStepType_BoilStepTypeChillingType = 1
)

// Enum value maps for BoilStepType_BoilStepTypeChillingType.
var (
	BoilStepType_BoilStepTypeChillingType_name = map[int32]string{
		0: "BATCH",
		1: "INLINE",
	}
	BoilStepType_BoilStepTypeChillingType_value = map[string]int32{
		"BATCH":  0,
		"INLINE": 1,
	}
)

func (x BoilStepType_BoilStepTypeChillingType) Enum() *BoilStepType_BoilStepTypeChillingType {
	p := new(BoilStepType_BoilStepTypeChillingType)
	*p = x
	return p
}

func (x BoilStepType_BoilStepTypeChillingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoilStepType_BoilStepTypeChillingType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[25].Descriptor()
}

func (BoilStepType_BoilStepTypeChillingType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[25]
}

func (x BoilStepType_BoilStepTypeChillingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoilStepType_BoilStepTypeChillingType.Descriptor instead.
func (BoilStepType_BoilStepTypeChillingType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{39, 0}
}

type FermentableType_FermentableBaseType int32

const (
	// dry extract
	FermentableType_DRY_EXTRACT FermentableType_FermentableBaseType = 0
	// extract
	FermentableType_EXTRACT FermentableType_FermentableBaseType = 1
	// grain
	FermentableType_GRAIN FermentableType_FermentableBaseType = 2
	// sugar
	FermentableType_SUGAR FermentableType_FermentableBaseType = 3
	// fruit
	FermentableType_FRUIT FermentableType_FermentableBaseType = 4
	// juice
	FermentableType_JUICE FermentableType_FermentableBaseType = 5
	// honey
	FermentableType_HONEY FermentableType_FermentableBaseType = 6
	// other
	FermentableType_OTHER FermentableType_FermentableBaseType = 7
)

// Enum value maps for FermentableType_FermentableBaseType.
var (
	FermentableType_FermentableBaseType_name = map[int32]string{
		0: "DRY_EXTRACT",
		1: "EXTRACT",
		2: "GRAIN",
		3: "SUGAR",
		4: "FRUIT",
		5: "JUICE",
		6: "HONEY",
		7: "OTHER",
	}
	FermentableType_FermentableBaseType_value = map[string]int32{
		"DRY_EXTRACT": 0,
		"EXTRACT":     1,
		"GRAIN":       2,
		"SUGAR":       3,
		"FRUIT":       4,
		"JUICE":       5,
		"HONEY":       6,
		"OTHER":       7,
	}
)

func (x FermentableType_FermentableBaseType) Enum() *FermentableType_FermentableBaseType {
	p := new(FermentableType_FermentableBaseType)
	*p = x
	return p
}

func (x FermentableType_FermentableBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FermentableType_FermentableBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[26].Descriptor()
}

func (FermentableType_FermentableBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[26]
}

func (x FermentableType_FermentableBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FermentableType_FermentableBaseType.Descriptor instead.
func (FermentableType_FermentableBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{40, 0}
}

type FermentableType_FermentableBaseGrainGroup int32

const (
	// base
	FermentableType_BASE FermentableType_FermentableBaseGrainGroup = 0
	// caramel
	FermentableType_CARAMEL FermentableType_FermentableBaseGrainGroup = 1
	// flaked
	FermentableType_FLAKED FermentableType_FermentableBaseGrainGroup = 2
	// roasted
	FermentableType_ROASTED FermentableType_FermentableBaseGrainGroup = 3
	// specialty
	FermentableType_SPECIALTY FermentableType_FermentableBaseGrainGroup = 4
	// smoked
	FermentableType_SMOKED FermentableType_FermentableBaseGrainGroup = 5
	// adjunct
	FermentableType_ADJUNCT FermentableType_FermentableBaseGrainGroup = 6
)

// Enum value maps for FermentableType_FermentableBaseGrainGroup.
var (
	FermentableType_FermentableBaseGrainGroup_name = map[int32]string{
		0: "BASE",
		1: "CARAMEL",
		2: "FLAKED",
		3: "ROASTED",
		4: "SPECIALTY",
		5: "SMOKED",
		6: "ADJUNCT",
	}
	FermentableType_FermentableBaseGrainGroup_value = map[string]int32{
		"BASE":      0,
		"CARAMEL":   1,
		"FLAKED":    2,
		"ROASTED":   3,
		"SPECIALTY": 4,
		"SMOKED":    5,
		"ADJUNCT":   6,
	}
)

func (x FermentableType_FermentableBaseGrainGroup) Enum() *FermentableType_FermentableBaseGrainGroup {
	p := new(FermentableType_FermentableBaseGrainGroup)
	*p = x
	return p
}

func (x FermentableType_FermentableBaseGrainGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FermentableType_FermentableBaseGrainGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[27].Descriptor()
}

func (FermentableType_FermentableBaseGrainGroup) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[27]
}

func (x FermentableType_FermentableBaseGrainGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FermentableType_FermentableBaseGrainGroup.Descriptor instead.
func (FermentableType_FermentableBaseGrainGroup) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{40, 1}
}

type DiastaticPowerType_DiastaticPowerUnitType int32

const (
	// Lintner
	DiastaticPowerType_lintner DiastaticPowerType_DiastaticPowerUnitType = 0
	// WK
	DiastaticPowerType_WK DiastaticPowerType_DiastaticPowerUnitType = 1
)

// Enum value maps for DiastaticPowerType_DiastaticPowerUnitType.
var (
	DiastaticPowerType_DiastaticPowerUnitType_name = map[int32]string{
		0: "lintner",
		1: "WK",
	}
	DiastaticPowerType_DiastaticPowerUnitType_value = map[string]int32{
		"lintner": 0,
		"WK":      1,
	}
)

func (x DiastaticPowerType_DiastaticPowerUnitType) Enum() *DiastaticPowerType_DiastaticPowerUnitType {
	p := new(DiastaticPowerType_DiastaticPowerUnitType)
	*p = x
	return p
}

func (x DiastaticPowerType_DiastaticPowerUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiastaticPowerType_DiastaticPowerUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[28].Descriptor()
}

func (DiastaticPowerType_DiastaticPowerUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[28]
}

func (x DiastaticPowerType_DiastaticPowerUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiastaticPowerType_DiastaticPowerUnitType.Descriptor instead.
func (DiastaticPowerType_DiastaticPowerUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{42, 0}
}

type CultureInformation_QualitativeRangeType int32

const (
	// very low
	CultureInformation_VERY_LOW CultureInformation_QualitativeRangeType = 0
	// low
	CultureInformation_LOW CultureInformation_QualitativeRangeType = 1
	// medium low
	CultureInformation_MEDIUM_LOW CultureInformation_QualitativeRangeType = 2
	// medium
	CultureInformation_MEDIUM CultureInformation_QualitativeRangeType = 3
	// medium high
	CultureInformation_MEDIUM_HIGH CultureInformation_QualitativeRangeType = 4
	// high
	CultureInformation_HIGH CultureInformation_QualitativeRangeType = 5
	// very high
	CultureInformation_VERY_HIGH CultureInformation_QualitativeRangeType = 6
)

// Enum value maps for CultureInformation_QualitativeRangeType.
var (
	CultureInformation_QualitativeRangeType_name = map[int32]string{
		0: "VERY_LOW",
		1: "LOW",
		2: "MEDIUM_LOW",
		3: "MEDIUM",
		4: "MEDIUM_HIGH",
		5: "HIGH",
		6: "VERY_HIGH",
	}
	CultureInformation_QualitativeRangeType_value = map[string]int32{
		"VERY_LOW":    0,
		"LOW":         1,
		"MEDIUM_LOW":  2,
		"MEDIUM":      3,
		"MEDIUM_HIGH": 4,
		"HIGH":        5,
		"VERY_HIGH":   6,
	}
)

func (x CultureInformation_QualitativeRangeType) Enum() *CultureInformation_QualitativeRangeType {
	p := new(CultureInformation_QualitativeRangeType)
	*p = x
	return p
}

func (x CultureInformation_QualitativeRangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CultureInformation_QualitativeRangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[29].Descriptor()
}

func (CultureInformation_QualitativeRangeType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[29]
}

func (x CultureInformation_QualitativeRangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CultureInformation_QualitativeRangeType.Descriptor instead.
func (CultureInformation_QualitativeRangeType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{43, 0}
}

type CultureInformation_CultureBaseType int32

const (
	// ale
	CultureInformation_ALE CultureInformation_CultureBaseType = 0
	// bacteria
	CultureInformation_BACTERIA CultureInformation_CultureBaseType = 1
	// brett
	CultureInformation_BRETT CultureInformation_CultureBaseType = 2
	// champagne
	CultureInformation_CHAMPAGNE CultureInformation_CultureBaseType = 3
	// kveik
	CultureInformation_KVEIK CultureInformation_CultureBaseType = 4
	// lacto
	CultureInformation_LACTO CultureInformation_CultureBaseType = 5
	// lager
	CultureInformation_LAGER CultureInformation_CultureBaseType = 6
	// malolactic
	CultureInformation_MALOLACTIC CultureInformation_CultureBaseType = 7
	// mixed-culture
	CultureInformation_MIXED_CULTURE CultureInformation_CultureBaseType = 8
	// other
	CultureInformation_OTHER CultureInformation_CultureBaseType = 9
	// pedio
	CultureInformation_PEDIO CultureInformation_CultureBaseType = 10
	// spontaneous
	CultureInformation_SPONTANEOUS CultureInformation_CultureBaseType = 11
	// wine
	CultureInformation_WINE CultureInformation_CultureBaseType = 12
)

// Enum value maps for CultureInformation_CultureBaseType.
var (
	CultureInformation_CultureBaseType_name = map[int32]string{
		0:  "ALE",
		1:  "BACTERIA",
		2:  "BRETT",
		3:  "CHAMPAGNE",
		4:  "KVEIK",
		5:  "LACTO",
		6:  "LAGER",
		7:  "MALOLACTIC",
		8:  "MIXED_CULTURE",
		9:  "OTHER",
		10: "PEDIO",
		11: "SPONTANEOUS",
		12: "WINE",
	}
	CultureInformation_CultureBaseType_value = map[string]int32{
		"ALE":           0,
		"BACTERIA":      1,
		"BRETT":         2,
		"CHAMPAGNE":     3,
		"KVEIK":         4,
		"LACTO":         5,
		"LAGER":         6,
		"MALOLACTIC":    7,
		"MIXED_CULTURE": 8,
		"OTHER":         9,
		"PEDIO":         10,
		"SPONTANEOUS":   11,
		"WINE":          12,
	}
)

func (x CultureInformation_CultureBaseType) Enum() *CultureInformation_CultureBaseType {
	p := new(CultureInformation_CultureBaseType)
	*p = x
	return p
}

func (x CultureInformation_CultureBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CultureInformation_CultureBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[30].Descriptor()
}

func (CultureInformation_CultureBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[30]
}

func (x CultureInformation_CultureBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CultureInformation_CultureBaseType.Descriptor instead.
func (CultureInformation_CultureBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{43, 1}
}

type CultureInformation_CultureBaseForm int32

const (
	// liquid
	CultureInformation_LIQUID CultureInformation_CultureBaseForm = 0
	// dry
	CultureInformation_DRY CultureInformation_CultureBaseForm = 1
	// slant
	CultureInformation_SLANT CultureInformation_CultureBaseForm = 2
	// culture
	CultureInformation_CULTURE CultureInformation_CultureBaseForm = 3
	// dregs
	CultureInformation_DREGS CultureInformation_CultureBaseForm = 4
)

// Enum value maps for CultureInformation_CultureBaseForm.
var (
	CultureInformation_CultureBaseForm_name = map[int32]string{
		0: "LIQUID",
		1: "DRY",
		2: "SLANT",
		3: "CULTURE",
		4: "DREGS",
	}
	CultureInformation_CultureBaseForm_value = map[string]int32{
		"LIQUID":  0,
		"DRY":     1,
		"SLANT":   2,
		"CULTURE": 3,
		"DREGS":   4,
	}
)

func (x CultureInformation_CultureBaseForm) Enum() *CultureInformation_CultureBaseForm {
	p := new(CultureInformation_CultureBaseForm)
	*p = x
	return p
}

func (x CultureInformation_CultureBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CultureInformation_CultureBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[31].Descriptor()
}

func (CultureInformation_CultureBaseForm) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[31]
}

func (x CultureInformation_CultureBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CultureInformation_CultureBaseForm.Descriptor instead.
func (CultureInformation_CultureBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{43, 2}
}

type TemperatureType_TemperatureUnitType int32

const (
	TemperatureType_C TemperatureType_TemperatureUnitType = 0
	TemperatureType_F TemperatureType_TemperatureUnitType = 1
)

// Enum value maps for TemperatureType_TemperatureUnitType.
var (
	TemperatureType_TemperatureUnitType_name = map[int32]string{
		0: "C",
		1: "F",
	}
	TemperatureType_TemperatureUnitType_value = map[string]int32{
		"C": 0,
		"F": 1,
	}
)

func (x TemperatureType_TemperatureUnitType) Enum() *TemperatureType_TemperatureUnitType {
	p := new(TemperatureType_TemperatureUnitType)
	*p = x
	return p
}

func (x TemperatureType_TemperatureUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemperatureType_TemperatureUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[32].Descriptor()
}

func (TemperatureType_TemperatureUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[32]
}

func (x TemperatureType_TemperatureUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemperatureType_TemperatureUnitType.Descriptor instead.
func (TemperatureType_TemperatureUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{45, 0}
}

type EquipmentItemType_EquipmentBaseForm int32

const (
	// HLT
	EquipmentItemType_HLT EquipmentItemType_EquipmentBaseForm = 0
	// Mash Tun
	EquipmentItemType_MASH_TUN EquipmentItemType_EquipmentBaseForm = 1
	// Lauter Tun
	EquipmentItemType_LAUTER_TUN EquipmentItemType_EquipmentBaseForm = 2
	// Brew Kettle
	EquipmentItemType_BREW_KETTLE EquipmentItemType_EquipmentBaseForm = 3
	// Fermenter
	EquipmentItemType_FERMENTER EquipmentItemType_EquipmentBaseForm = 4
	// Aging Vessel
	EquipmentItemType_AGING_VESSEL EquipmentItemType_EquipmentBaseForm = 5
	// Packaging Vessel
	EquipmentItemType_PACKAGING_VESSEL EquipmentItemType_EquipmentBaseForm = 6
)

// Enum value maps for EquipmentItemType_EquipmentBaseForm.
var (
	EquipmentItemType_EquipmentBaseForm_name = map[int32]string{
		0: "HLT",
		1: "MASH_TUN",
		2: "LAUTER_TUN",
		3: "BREW_KETTLE",
		4: "FERMENTER",
		5: "AGING_VESSEL",
		6: "PACKAGING_VESSEL",
	}
	EquipmentItemType_EquipmentBaseForm_value = map[string]int32{
		"HLT":              0,
		"MASH_TUN":         1,
		"LAUTER_TUN":       2,
		"BREW_KETTLE":      3,
		"FERMENTER":        4,
		"AGING_VESSEL":     5,
		"PACKAGING_VESSEL": 6,
	}
)

func (x EquipmentItemType_EquipmentBaseForm) Enum() *EquipmentItemType_EquipmentBaseForm {
	p := new(EquipmentItemType_EquipmentBaseForm)
	*p = x
	return p
}

func (x EquipmentItemType_EquipmentBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentItemType_EquipmentBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[33].Descriptor()
}

func (EquipmentItemType_EquipmentBaseForm) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[33]
}

func (x EquipmentItemType_EquipmentBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentItemType_EquipmentBaseForm.Descriptor instead.
func (EquipmentItemType_EquipmentBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{49, 0}
}

type SpecificHeatType_SpecificHeatUnitType int32

const (
	// Cal/(g C)
	SpecificHeatType_CALGC SpecificHeatType_SpecificHeatUnitType = 0
	// J/(kg K)
	SpecificHeatType_JKGK SpecificHeatType_SpecificHeatUnitType = 1
	// BTU/(lb F)
	SpecificHeatType_BTULBF SpecificHeatType_SpecificHeatUnitType = 2
)

// Enum value maps for SpecificHeatType_SpecificHeatUnitType.
var (
	SpecificHeatType_SpecificHeatUnitType_name = map[int32]string{
		0: "CALGC",
		1: "JKGK",
		2: "BTULBF",
	}
	SpecificHeatType_SpecificHeatUnitType_value = map[string]int32{
		"CALGC":  0,
		"JKGK":   1,
		"BTULBF": 2,
	}
)

func (x SpecificHeatType_SpecificHeatUnitType) Enum() *SpecificHeatType_SpecificHeatUnitType {
	p := new(SpecificHeatType_SpecificHeatUnitType)
	*p = x
	return p
}

func (x SpecificHeatType_SpecificHeatUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificHeatType_SpecificHeatUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[34].Descriptor()
}

func (SpecificHeatType_SpecificHeatUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[34]
}

func (x SpecificHeatType_SpecificHeatUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificHeatType_SpecificHeatUnitType.Descriptor instead.
func (SpecificHeatType_SpecificHeatUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{50, 0}
}

type PackagingVesselType_PackagingVesselTypeType int32

const (
	// keg
	PackagingVesselType_KEG PackagingVesselType_PackagingVesselTypeType = 0
	// bottle
	PackagingVesselType_BOTTLE PackagingVesselType_PackagingVesselTypeType = 1
	// cask
	PackagingVesselType_CASK PackagingVesselType_PackagingVesselTypeType = 2
	// tank
	PackagingVesselType_TANK PackagingVesselType_PackagingVesselTypeType = 3
	// firkin
	PackagingVesselType_FIRKIN PackagingVesselType_PackagingVesselTypeType = 4
	// other
	PackagingVesselType_OTHER PackagingVesselType_PackagingVesselTypeType = 5
)

// Enum value maps for PackagingVesselType_PackagingVesselTypeType.
var (
	PackagingVesselType_PackagingVesselTypeType_name = map[int32]string{
		0: "KEG",
		1: "BOTTLE",
		2: "CASK",
		3: "TANK",
		4: "FIRKIN",
		5: "OTHER",
	}
	PackagingVesselType_PackagingVesselTypeType_value = map[string]int32{
		"KEG":    0,
		"BOTTLE": 1,
		"CASK":   2,
		"TANK":   3,
		"FIRKIN": 4,
		"OTHER":  5,
	}
)

func (x PackagingVesselType_PackagingVesselTypeType) Enum() *PackagingVesselType_PackagingVesselTypeType {
	p := new(PackagingVesselType_PackagingVesselTypeType)
	*p = x
	return p
}

func (x PackagingVesselType_PackagingVesselTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackagingVesselType_PackagingVesselTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[35].Descriptor()
}

func (PackagingVesselType_PackagingVesselTypeType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[35]
}

func (x PackagingVesselType_PackagingVesselTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackagingVesselType_PackagingVesselTypeType.Descriptor instead.
func (PackagingVesselType_PackagingVesselTypeType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{52, 0}
}

type VarietyInformation_HopVarietyBaseForm int32

const (
	// extract
	VarietyInformation_EXTRACT VarietyInformation_HopVarietyBaseForm = 0
	// leaf
	VarietyInformation_LEAF VarietyInformation_HopVarietyBaseForm = 1
	// leaf (wet)
	VarietyInformation_LEAFWET VarietyInformation_HopVarietyBaseForm = 2
	// pellet
	VarietyInformation_PELLET VarietyInformation_HopVarietyBaseForm = 3
	// powder
	VarietyInformation_POWDER VarietyInformation_HopVarietyBaseForm = 4
	// plug
	VarietyInformation_PLUG VarietyInformation_HopVarietyBaseForm = 5
)

// Enum value maps for VarietyInformation_HopVarietyBaseForm.
var (
	VarietyInformation_HopVarietyBaseForm_name = map[int32]string{
		0: "EXTRACT",
		1: "LEAF",
		2: "LEAFWET",
		3: "PELLET",
		4: "POWDER",
		5: "PLUG",
	}
	VarietyInformation_HopVarietyBaseForm_value = map[string]int32{
		"EXTRACT": 0,
		"LEAF":    1,
		"LEAFWET": 2,
		"PELLET":  3,
		"POWDER":  4,
		"PLUG":    5,
	}
)

func (x VarietyInformation_HopVarietyBaseForm) Enum() *VarietyInformation_HopVarietyBaseForm {
	p := new(VarietyInformation_HopVarietyBaseForm)
	*p = x
	return p
}

func (x VarietyInformation_HopVarietyBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarietyInformation_HopVarietyBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[36].Descriptor()
}

func (VarietyInformation_HopVarietyBaseForm) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[36]
}

func (x VarietyInformation_HopVarietyBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarietyInformation_HopVarietyBaseForm.Descriptor instead.
func (VarietyInformation_HopVarietyBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{53, 0}
}

type VarietyInformation_VarietyInformationType int32

const (
	// aroma
	VarietyInformation_AROMA VarietyInformation_VarietyInformationType = 0
	// bittering
	VarietyInformation_BITTERING VarietyInformation_VarietyInformationType = 1
	// flavor
	VarietyInformation_FLAVOR VarietyInformation_VarietyInformationType = 2
	// aroma/bittering
	VarietyInformation_AROMA_BITTERING VarietyInformation_VarietyInformationType = 3
	// bittering/flavor
	VarietyInformation_BITTERING_FLAVOR VarietyInformation_VarietyInformationType = 4
	// aroma/flavor
	VarietyInformation_AROMA_FLAVOR VarietyInformation_VarietyInformationType = 5
	// aroma/bittering/flavor
	VarietyInformation_AROMA_BITTERING_FLAVOR VarietyInformation_VarietyInformationType = 6
)

// Enum value maps for VarietyInformation_VarietyInformationType.
var (
	VarietyInformation_VarietyInformationType_name = map[int32]string{
		0: "AROMA",
		1: "BITTERING",
		2: "FLAVOR",
		3: "AROMA_BITTERING",
		4: "BITTERING_FLAVOR",
		5: "AROMA_FLAVOR",
		6: "AROMA_BITTERING_FLAVOR",
	}
	VarietyInformation_VarietyInformationType_value = map[string]int32{
		"AROMA":                  0,
		"BITTERING":              1,
		"FLAVOR":                 2,
		"AROMA_BITTERING":        3,
		"BITTERING_FLAVOR":       4,
		"AROMA_FLAVOR":           5,
		"AROMA_BITTERING_FLAVOR": 6,
	}
)

func (x VarietyInformation_VarietyInformationType) Enum() *VarietyInformation_VarietyInformationType {
	p := new(VarietyInformation_VarietyInformationType)
	*p = x
	return p
}

func (x VarietyInformation_VarietyInformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarietyInformation_VarietyInformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[37].Descriptor()
}

func (VarietyInformation_VarietyInformationType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[37]
}

func (x VarietyInformation_VarietyInformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarietyInformation_VarietyInformationType.Descriptor instead.
func (VarietyInformation_VarietyInformationType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{53, 1}
}

type Recipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A collection of steps providing process information for common mashing procedures
	Mashes []*MashProcedureType `protobuf:"bytes,1,rep,name=mashes,proto3" json:"mashes,omitempty"`
	// Records containing a minimal collection of the description of ingredients, procedures and other required parameters necessary to recreate a batch of beer
	Recipes []*RecipeType `protobuf:"bytes,2,rep,name=recipes,proto3" json:"recipes,omitempty"`
	// Records for adjuncts which do not contribute to the gravity of the beer
	MiscellaneousIngredients []*MiscellaneousType `protobuf:"bytes,3,rep,name=miscellaneous_ingredients,json=miscellaneousIngredients,proto3" json:"miscellaneous_ingredients,omitempty"`
	// Records detailing the characteristics of the beer styles for which judging guidelines have been established
	Styles []*StyleType `protobuf:"bytes,4,rep,name=styles,proto3" json:"styles,omitempty"`
	// A collection of steps providing process information for common fermentation procedures
	Fermentations []*FermentationProcedureType `protobuf:"bytes,5,rep,name=fermentations,proto3" json:"fermentations,omitempty"`
	// A collection of steps providing process information for common boil procedures
	Boil []*BoilProcedureType `protobuf:"bytes,6,rep,name=boil,proto3" json:"boil,omitempty"`
	// Explicitly encode version within list of records
	Version float64 `protobuf:"fixed64,7,opt,name=version,proto3" json:"version,omitempty"`
	// Records for any ingredient that contributes to the gravity of the beer
	Fermentables []*FermentableType `protobuf:"bytes,8,rep,name=fermentables,proto3" json:"fermentables,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
	TimingObject *TimingType `protobuf:"bytes,9,opt,name=timing_object,json=timingObject,proto3" json:"timing_object,omitempty"`
	// Records detailing the wide array of unique cultures
	Cultures []*CultureInformation `protobuf:"bytes,10,rep,name=cultures,proto3" json:"cultures,omitempty"`
	// Provides necessary information for brewing equipment
	Equipments []*EquipmentType `protobuf:"bytes,11,rep,name=equipments,proto3" json:"equipments,omitempty"`
	// A collection of steps providing process information for common packaging procedures
	Packaging []*PackagingProcedureType `protobuf:"bytes,12,rep,name=packaging,proto3" json:"packaging,omitempty"`
	// Records detailing the many properties of unique hop varieties
	HopVarieties []*VarietyInformation `protobuf:"bytes,13,rep,name=hop_varieties,json=hopVarieties,proto3" json:"hop_varieties,omitempty"`
	// Records for water profiles used in brewing
	Profiles []*WaterBase `protobuf:"bytes,14,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{0}
}

func (x *Recipe) GetMashes() []*MashProcedureType {
	if x != nil {
		return x.Mashes
	}
	return nil
}

func (x *Recipe) GetRecipes() []*RecipeType {
	if x != nil {
		return x.Recipes
	}
	return nil
}

func (x *Recipe) GetMiscellaneousIngredients() []*MiscellaneousType {
	if x != nil {
		return x.MiscellaneousIngredients
	}
	return nil
}

func (x *Recipe) GetStyles() []*StyleType {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *Recipe) GetFermentations() []*FermentationProcedureType {
	if x != nil {
		return x.Fermentations
	}
	return nil
}

func (x *Recipe) GetBoil() []*BoilProcedureType {
	if x != nil {
		return x.Boil
	}
	return nil
}

func (x *Recipe) GetVersion() float64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Recipe) GetFermentables() []*FermentableType {
	if x != nil {
		return x.Fermentables
	}
	return nil
}

func (x *Recipe) GetTimingObject() *TimingType {
	if x != nil {
		return x.TimingObject
	}
	return nil
}

func (x *Recipe) GetCultures() []*CultureInformation {
	if x != nil {
		return x.Cultures
	}
	return nil
}

func (x *Recipe) GetEquipments() []*EquipmentType {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *Recipe) GetPackaging() []*PackagingProcedureType {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *Recipe) GetHopVarieties() []*VarietyInformation {
	if x != nil {
		return x.HopVarieties
	}
	return nil
}

func (x *Recipe) GetProfiles() []*WaterBase {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// This defines the procedure for performing unique mashing processes
type MashProcedureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Initial grain temperature prior to the start of the mash
	GrainTemperature *TemperatureType `protobuf:"bytes,1,opt,name=grain_temperature,json=grainTemperature,proto3" json:"grain_temperature,omitempty"`
	Notes            string           `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	MashSteps        []*MashStepType  `protobuf:"bytes,3,rep,name=mash_steps,json=mashSteps,proto3" json:"mash_steps,omitempty"`
	Name             string           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MashProcedureType) Reset() {
	*x = MashProcedureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MashProcedureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MashProcedureType) ProtoMessage() {}

func (x *MashProcedureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MashProcedureType.ProtoReflect.Descriptor instead.
func (*MashProcedureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{1}
}

func (x *MashProcedureType) GetGrainTemperature() *TemperatureType {
	if x != nil {
		return x.GrainTemperature
	}
	return nil
}

func (x *MashProcedureType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MashProcedureType) GetMashSteps() []*MashStepType {
	if x != nil {
		return x.MashSteps
	}
	return nil
}

func (x *MashProcedureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// MashStepType - a per step representation occurring during the mash
type MashStepType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StepTime *TimeType `protobuf:"bytes,1,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// The amount of time  that passes before this step begins. eg moving from a mash step (step 1) of 148F, to a new temperature step of 156F (step 2) may take 8 minutes to heat the mash. Step 2 would have a ramp time of 8 minutes
	RampTime       *TimeType        `protobuf:"bytes,2,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,3,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	Description    string           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Temperature of the water for an infusion step
	InfuseTemperature *TemperatureType              `protobuf:"bytes,5,opt,name=infuse_temperature,json=infuseTemperature,proto3" json:"infuse_temperature,omitempty"`
	StartPH           *AcidityType                  `protobuf:"bytes,6,opt,name=start_pH,json=startPH,proto3" json:"start_pH,omitempty"`
	EndPH             *AcidityType                  `protobuf:"bytes,7,opt,name=end_pH,json=endPH,proto3" json:"end_pH,omitempty"`
	Name              string                        `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Type              MashStepType_MashStepTypeType `protobuf:"varint,9,opt,name=type,proto3,enum=beerproto.MashStepType_MashStepTypeType" json:"type,omitempty"`
	Amount            *VolumeType                   `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
	StepTemperature   *TemperatureType              `protobuf:"bytes,11,opt,name=step_temperature,json=stepTemperature,proto3" json:"step_temperature,omitempty"`
	// Also known as the mash thickness. eg 1.75 qt/lb or 3.65 L/kg
	WaterGrainRatio *SpecificVolumeType `protobuf:"bytes,12,opt,name=water_grain_ratio,json=waterGrainRatio,proto3" json:"water_grain_ratio,omitempty"`
}

func (x *MashStepType) Reset() {
	*x = MashStepType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MashStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MashStepType) ProtoMessage() {}

func (x *MashStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MashStepType.ProtoReflect.Descriptor instead.
func (*MashStepType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{2}
}

func (x *MashStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *MashStepType) GetRampTime() *TimeType {
	if x != nil {
		return x.RampTime
	}
	return nil
}

func (x *MashStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *MashStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MashStepType) GetInfuseTemperature() *TemperatureType {
	if x != nil {
		return x.InfuseTemperature
	}
	return nil
}

func (x *MashStepType) GetStartPH() *AcidityType {
	if x != nil {
		return x.StartPH
	}
	return nil
}

func (x *MashStepType) GetEndPH() *AcidityType {
	if x != nil {
		return x.EndPH
	}
	return nil
}

func (x *MashStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MashStepType) GetType() MashStepType_MashStepTypeType {
	if x != nil {
		return x.Type
	}
	return MashStepType_INFUSION
}

func (x *MashStepType) GetAmount() *VolumeType {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MashStepType) GetStepTemperature() *TemperatureType {
	if x != nil {
		return x.StepTemperature
	}
	return nil
}

func (x *MashStepType) GetWaterGrainRatio() *SpecificVolumeType {
	if x != nil {
		return x.WaterGrainRatio
	}
	return nil
}

type TimeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  TimeType_TimeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.TimeType_TimeUnitType" json:"unit,omitempty"`
}

func (x *TimeType) Reset() {
	*x = TimeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeType) ProtoMessage() {}

func (x *TimeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeType.ProtoReflect.Descriptor instead.
func (*TimeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{3}
}

func (x *TimeType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TimeType) GetUnit() TimeType_TimeUnitType {
	if x != nil {
		return x.Unit
	}
	return TimeType_SEC
}

type AcidityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  AcidityType_AcidityUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.AcidityType_AcidityUnitType" json:"unit,omitempty"`
}

func (x *AcidityType) Reset() {
	*x = AcidityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcidityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcidityType) ProtoMessage() {}

func (x *AcidityType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcidityType.ProtoReflect.Descriptor instead.
func (*AcidityType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{4}
}

func (x *AcidityType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AcidityType) GetUnit() AcidityType_AcidityUnitType {
	if x != nil {
		return x.Unit
	}
	return AcidityType_PH
}

type VolumeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  VolumeType_VolumeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.VolumeType_VolumeUnitType" json:"unit,omitempty"`
}

func (x *VolumeType) Reset() {
	*x = VolumeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeType) ProtoMessage() {}

func (x *VolumeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeType.ProtoReflect.Descriptor instead.
func (*VolumeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{5}
}

func (x *VolumeType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *VolumeType) GetUnit() VolumeType_VolumeUnitType {
	if x != nil {
		return x.Unit
	}
	return VolumeType_ML
}

type SpecificVolumeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                                   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  SpecificVolumeType_SpecificVolumeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.SpecificVolumeType_SpecificVolumeUnitType" json:"unit,omitempty"`
}

func (x *SpecificVolumeType) Reset() {
	*x = SpecificVolumeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificVolumeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificVolumeType) ProtoMessage() {}

func (x *SpecificVolumeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificVolumeType.ProtoReflect.Descriptor instead.
func (*SpecificVolumeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{6}
}

func (x *SpecificVolumeType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SpecificVolumeType) GetUnit() SpecificVolumeType_SpecificVolumeUnitType {
	if x != nil {
		return x.Unit
	}
	return SpecificVolumeType_QTLB
}

// RecipeType composes the information stored in a recipe
type RecipeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used to store each efficiency component, including conversion, and brewhouse
	Efficiency *EfficiencyType  `protobuf:"bytes,1,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	Style      *RecipeStyleType `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
	IbuEstimate *IBUEstimateType `protobuf:"bytes,3,opt,name=ibu_estimate,json=ibuEstimate,proto3" json:"ibu_estimate,omitempty"`
	// The color of the finished beer, using SRM or EBC
	ColorEstimate *ColorType `protobuf:"bytes,4,opt,name=color_estimate,json=colorEstimate,proto3" json:"color_estimate,omitempty"`
	// The final beer pH at the end of fermentation
	BeerPH   *AcidityType              `protobuf:"bytes,5,opt,name=beer_pH,json=beerPH,proto3" json:"beer_pH,omitempty"`
	Name     string                    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Type     RecipeType_RecipeTypeType `protobuf:"varint,7,opt,name=type,proto3,enum=beerproto.RecipeType_RecipeTypeType" json:"type,omitempty"`
	Coauthor string                    `protobuf:"bytes,8,opt,name=coauthor,proto3" json:"coauthor,omitempty"`
	// The gravity of wort when transffered to the fermenter
	OriginalGravity *GravityType `protobuf:"bytes,9,opt,name=original_gravity,json=originalGravity,proto3" json:"original_gravity,omitempty"`
	// The gravity of beer at the end of fermentation
	FinalGravity *GravityType `protobuf:"bytes,10,opt,name=final_gravity,json=finalGravity,proto3" json:"final_gravity,omitempty"`
	// The final carbonation of the beer when packaged or served
	Carbonation float64 `protobuf:"fixed64,11,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	// FermentationProcedureType defines the procedure for performing fermentation
	Fermentation *FermentationProcedureType `protobuf:"bytes,12,opt,name=fermentation,proto3" json:"fermentation,omitempty"`
	Author       string                     `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty"`
	// A collection of all ingredients used for the recipe
	Ingredients *IngredientsType `protobuf:"bytes,14,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	// This defines the procedure for performing unique mashing processes
	Mash *MashProcedureType `protobuf:"bytes,15,opt,name=mash,proto3" json:"mash,omitempty"`
	// Describes the procedure for packaging your beverage
	Packaging *PackagingProcedureType `protobuf:"bytes,16,opt,name=packaging,proto3" json:"packaging,omitempty"`
	// Defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
	Boil *BoilProcedureType `protobuf:"bytes,17,opt,name=boil,proto3" json:"boil,omitempty"`
	// Used to store subjective tasting notes, and rating
	Taste           *TasteType `protobuf:"bytes,18,opt,name=taste,proto3" json:"taste,omitempty"`
	CaloriesPerPint float64    `protobuf:"fixed64,19,opt,name=calories_per_pint,json=caloriesPerPint,proto3" json:"calories_per_pint,omitempty"`
	Created         string     `protobuf:"bytes,20,opt,name=created,proto3" json:"created,omitempty"`
	// The volume into the fermenter
	BatchSize       *VolumeType  `protobuf:"bytes,21,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Notes           string       `protobuf:"bytes,22,opt,name=notes,proto3" json:"notes,omitempty"`
	AlcoholByVolume *PercentType `protobuf:"bytes,23,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	// The total apparent attenuation of the finished beer after fermentation
	ApparentAttenuation *PercentType `protobuf:"bytes,24,opt,name=apparent_attenuation,json=apparentAttenuation,proto3" json:"apparent_attenuation,omitempty"`
}

func (x *RecipeType) Reset() {
	*x = RecipeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeType) ProtoMessage() {}

func (x *RecipeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeType.ProtoReflect.Descriptor instead.
func (*RecipeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{7}
}

func (x *RecipeType) GetEfficiency() *EfficiencyType {
	if x != nil {
		return x.Efficiency
	}
	return nil
}

func (x *RecipeType) GetStyle() *RecipeStyleType {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *RecipeType) GetIbuEstimate() *IBUEstimateType {
	if x != nil {
		return x.IbuEstimate
	}
	return nil
}

func (x *RecipeType) GetColorEstimate() *ColorType {
	if x != nil {
		return x.ColorEstimate
	}
	return nil
}

func (x *RecipeType) GetBeerPH() *AcidityType {
	if x != nil {
		return x.BeerPH
	}
	return nil
}

func (x *RecipeType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeType) GetType() RecipeType_RecipeTypeType {
	if x != nil {
		return x.Type
	}
	return RecipeType_CIDER
}

func (x *RecipeType) GetCoauthor() string {
	if x != nil {
		return x.Coauthor
	}
	return ""
}

func (x *RecipeType) GetOriginalGravity() *GravityType {
	if x != nil {
		return x.OriginalGravity
	}
	return nil
}

func (x *RecipeType) GetFinalGravity() *GravityType {
	if x != nil {
		return x.FinalGravity
	}
	return nil
}

func (x *RecipeType) GetCarbonation() float64 {
	if x != nil {
		return x.Carbonation
	}
	return 0
}

func (x *RecipeType) GetFermentation() *FermentationProcedureType {
	if x != nil {
		return x.Fermentation
	}
	return nil
}

func (x *RecipeType) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *RecipeType) GetIngredients() *IngredientsType {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeType) GetMash() *MashProcedureType {
	if x != nil {
		return x.Mash
	}
	return nil
}

func (x *RecipeType) GetPackaging() *PackagingProcedureType {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *RecipeType) GetBoil() *BoilProcedureType {
	if x != nil {
		return x.Boil
	}
	return nil
}

func (x *RecipeType) GetTaste() *TasteType {
	if x != nil {
		return x.Taste
	}
	return nil
}

func (x *RecipeType) GetCaloriesPerPint() float64 {
	if x != nil {
		return x.CaloriesPerPint
	}
	return 0
}

func (x *RecipeType) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *RecipeType) GetBatchSize() *VolumeType {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *RecipeType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeType) GetAlcoholByVolume() *PercentType {
	if x != nil {
		return x.AlcoholByVolume
	}
	return nil
}

func (x *RecipeType) GetApparentAttenuation() *PercentType {
	if x != nil {
		return x.ApparentAttenuation
	}
	return nil
}

// The efficiencyType stores each efficiency component
type EfficiencyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of sugar from the grain yield that is extracted and converted during the mash
	Conversion *PercentType `protobuf:"bytes,1,opt,name=conversion,proto3" json:"conversion,omitempty"`
	// The percentage of sugar that makes it from the mash tun to the kettle
	Lauter *PercentType `protobuf:"bytes,2,opt,name=lauter,proto3" json:"lauter,omitempty"`
	// The percentage of sugar that makes it from the grain to the kettle
	Mash *PercentType `protobuf:"bytes,3,opt,name=mash,proto3" json:"mash,omitempty"`
	// The percentage of sugar that makes it from the grain to the fermenter
	Brewhouse *PercentType `protobuf:"bytes,4,opt,name=brewhouse,proto3" json:"brewhouse,omitempty"`
}

func (x *EfficiencyType) Reset() {
	*x = EfficiencyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EfficiencyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfficiencyType) ProtoMessage() {}

func (x *EfficiencyType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfficiencyType.ProtoReflect.Descriptor instead.
func (*EfficiencyType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{8}
}

func (x *EfficiencyType) GetConversion() *PercentType {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *EfficiencyType) GetLauter() *PercentType {
	if x != nil {
		return x.Lauter
	}
	return nil
}

func (x *EfficiencyType) GetMash() *PercentType {
	if x != nil {
		return x.Mash
	}
	return nil
}

func (x *EfficiencyType) GetBrewhouse() *PercentType {
	if x != nil {
		return x.Brewhouse
	}
	return nil
}

// RecipeStyleType defines style information stored in a recipe record
type RecipeStyleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           RecipeStyleType_StyleCategories `protobuf:"varint,1,opt,name=type,proto3,enum=beerproto.RecipeStyleType_StyleCategories" json:"type,omitempty"`
	Name           string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category       string                          `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	CategoryNumber int32                           `protobuf:"varint,4,opt,name=category_number,json=categoryNumber,proto3" json:"category_number,omitempty"`
	StyleLetter    string                          `protobuf:"bytes,5,opt,name=style_letter,json=styleLetter,proto3" json:"style_letter,omitempty"`
	StyleGuide     string                          `protobuf:"bytes,6,opt,name=style_guide,json=styleGuide,proto3" json:"style_guide,omitempty"`
}

func (x *RecipeStyleType) Reset() {
	*x = RecipeStyleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeStyleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStyleType) ProtoMessage() {}

func (x *RecipeStyleType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStyleType.ProtoReflect.Descriptor instead.
func (*RecipeStyleType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{9}
}

func (x *RecipeStyleType) GetType() RecipeStyleType_StyleCategories {
	if x != nil {
		return x.Type
	}
	return RecipeStyleType_BEER
}

func (x *RecipeStyleType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStyleType) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *RecipeStyleType) GetCategoryNumber() int32 {
	if x != nil {
		return x.CategoryNumber
	}
	return 0
}

func (x *RecipeStyleType) GetStyleLetter() string {
	if x != nil {
		return x.StyleLetter
	}
	return ""
}

func (x *RecipeStyleType) GetStyleGuide() string {
	if x != nil {
		return x.StyleGuide
	}
	return ""
}

// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
type IBUEstimateType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method IBUEstimateType_IBUMethodType `protobuf:"varint,1,opt,name=method,proto3,enum=beerproto.IBUEstimateType_IBUMethodType" json:"method,omitempty"`
}

func (x *IBUEstimateType) Reset() {
	*x = IBUEstimateType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IBUEstimateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IBUEstimateType) ProtoMessage() {}

func (x *IBUEstimateType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IBUEstimateType.ProtoReflect.Descriptor instead.
func (*IBUEstimateType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{10}
}

func (x *IBUEstimateType) GetMethod() IBUEstimateType_IBUMethodType {
	if x != nil {
		return x.Method
	}
	return IBUEstimateType_Rager
}

type IngredientsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// miscellaneous_additions collects all the miscellaneous items for use in a recipe
	MiscellaneousAdditions []*MiscellaneousAdditionType `protobuf:"bytes,1,rep,name=miscellaneous_additions,json=miscellaneousAdditions,proto3" json:"miscellaneous_additions,omitempty"`
	// culture_additions collects all the culture items for use in a recipe
	CultureAdditions []*CultureAdditionType `protobuf:"bytes,2,rep,name=culture_additions,json=cultureAdditions,proto3" json:"culture_additions,omitempty"`
	// water_additions collects all the water items for use in a recipe
	WaterAdditions []*WaterAdditionType `protobuf:"bytes,3,rep,name=water_additions,json=waterAdditions,proto3" json:"water_additions,omitempty"`
	// fermentable_additions collects all the fermentable ingredients for use in a recipe
	FermentableAdditions []*FermentableAdditionType `protobuf:"bytes,4,rep,name=fermentable_additions,json=fermentableAdditions,proto3" json:"fermentable_additions,omitempty"`
	// hop_additions collects all the hops for use in a recipe
	HopAdditions []*HopAdditionType `protobuf:"bytes,5,rep,name=hop_additions,json=hopAdditions,proto3" json:"hop_additions,omitempty"`
}

func (x *IngredientsType) Reset() {
	*x = IngredientsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngredientsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngredientsType) ProtoMessage() {}

func (x *IngredientsType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngredientsType.ProtoReflect.Descriptor instead.
func (*IngredientsType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{11}
}

func (x *IngredientsType) GetMiscellaneousAdditions() []*MiscellaneousAdditionType {
	if x != nil {
		return x.MiscellaneousAdditions
	}
	return nil
}

func (x *IngredientsType) GetCultureAdditions() []*CultureAdditionType {
	if x != nil {
		return x.CultureAdditions
	}
	return nil
}

func (x *IngredientsType) GetWaterAdditions() []*WaterAdditionType {
	if x != nil {
		return x.WaterAdditions
	}
	return nil
}

func (x *IngredientsType) GetFermentableAdditions() []*FermentableAdditionType {
	if x != nil {
		return x.FermentableAdditions
	}
	return nil
}

func (x *IngredientsType) GetHopAdditions() []*HopAdditionType {
	if x != nil {
		return x.HopAdditions
	}
	return nil
}

// MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe
type MiscellaneousAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Producer string `protobuf:"bytes,2,opt,name=producer,proto3" json:"producer,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing    *TimingType                                     `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ProductId string                                          `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type      MiscellaneousAdditionType_MiscellaneousBaseType `protobuf:"varint,5,opt,name=type,proto3,enum=beerproto.MiscellaneousAdditionType_MiscellaneousBaseType" json:"type,omitempty"`
	// Types that are assignable to Amount:
	//	*MiscellaneousAdditionType_Mass
	//	*MiscellaneousAdditionType_Unit
	//	*MiscellaneousAdditionType_Volume
	Amount isMiscellaneousAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *MiscellaneousAdditionType) Reset() {
	*x = MiscellaneousAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousAdditionType) ProtoMessage() {}

func (x *MiscellaneousAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousAdditionType.ProtoReflect.Descriptor instead.
func (*MiscellaneousAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{12}
}

func (x *MiscellaneousAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetType() MiscellaneousAdditionType_MiscellaneousBaseType {
	if x != nil {
		return x.Type
	}
	return MiscellaneousAdditionType_SPICE
}

func (m *MiscellaneousAdditionType) GetAmount() isMiscellaneousAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetUnit() *UnitType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isMiscellaneousAdditionType_Amount interface {
	isMiscellaneousAdditionType_Amount()
}

type MiscellaneousAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,6,opt,name=mass,proto3,oneof"`
}

type MiscellaneousAdditionType_Unit struct {
	Unit *UnitType `protobuf:"bytes,7,opt,name=unit,proto3,oneof"`
}

type MiscellaneousAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,8,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousAdditionType_Mass) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Unit) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Volume) isMiscellaneousAdditionType_Amount() {}

type MassType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  MassType_MassUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.MassType_MassUnitType" json:"unit,omitempty"`
}

func (x *MassType) Reset() {
	*x = MassType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassType) ProtoMessage() {}

func (x *MassType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassType.ProtoReflect.Descriptor instead.
func (*MassType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{13}
}

func (x *MassType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MassType) GetUnit() MassType_MassUnitType {
	if x != nil {
		return x.Unit
	}
	return MassType_MG
}

// UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet
type UnitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  UnitType_UnitUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.UnitType_UnitUnitType" json:"unit,omitempty"`
}

func (x *UnitType) Reset() {
	*x = UnitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitType) ProtoMessage() {}

func (x *UnitType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitType.ProtoReflect.Descriptor instead.
func (*UnitType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{14}
}

func (x *UnitType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnitType) GetUnit() UnitType_UnitUnitType {
	if x != nil {
		return x.Unit
	}
	return UnitType_ONE
}

// CultureAdditionType collects the attributes of each culture ingredient for use in a recipe
type CultureAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Form              CultureAdditionType_CultureBaseForm `protobuf:"varint,1,opt,name=form,proto3,enum=beerproto.CultureAdditionType_CultureBaseForm" json:"form,omitempty"`
	ProductId         string                              `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Name              string                              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CellCountBillions int32                               `protobuf:"varint,4,opt,name=cell_count_billions,json=cellCountBillions,proto3" json:"cell_count_billions,omitempty"`
	TimesCultured     int32                               `protobuf:"varint,5,opt,name=times_cultured,json=timesCultured,proto3" json:"times_cultured,omitempty"`
	Producer          string                              `protobuf:"bytes,6,opt,name=producer,proto3" json:"producer,omitempty"`
	Type              CultureAdditionType_CultureBaseType `protobuf:"varint,7,opt,name=type,proto3,enum=beerproto.CultureAdditionType_CultureBaseType" json:"type,omitempty"`
	// The expected, or measured apparent attenuation for a given culture in a given recipe. In comparison to attenuation range, this is a single value.
	Attenuation *PercentType `protobuf:"bytes,8,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,9,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are assignable to Amount:
	//	*CultureAdditionType_Mass
	//	*CultureAdditionType_Unit
	//	*CultureAdditionType_Volume
	Amount isCultureAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *CultureAdditionType) Reset() {
	*x = CultureAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CultureAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CultureAdditionType) ProtoMessage() {}

func (x *CultureAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CultureAdditionType.ProtoReflect.Descriptor instead.
func (*CultureAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{15}
}

func (x *CultureAdditionType) GetForm() CultureAdditionType_CultureBaseForm {
	if x != nil {
		return x.Form
	}
	return CultureAdditionType_LIQUID
}

func (x *CultureAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CultureAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CultureAdditionType) GetCellCountBillions() int32 {
	if x != nil {
		return x.CellCountBillions
	}
	return 0
}

func (x *CultureAdditionType) GetTimesCultured() int32 {
	if x != nil {
		return x.TimesCultured
	}
	return 0
}

func (x *CultureAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *CultureAdditionType) GetType() CultureAdditionType_CultureBaseType {
	if x != nil {
		return x.Type
	}
	return CultureAdditionType_ALE
}

func (x *CultureAdditionType) GetAttenuation() *PercentType {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *CultureAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (m *CultureAdditionType) GetAmount() isCultureAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *CultureAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*CultureAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *CultureAdditionType) GetUnit() *UnitType {
	if x, ok := x.GetAmount().(*CultureAdditionType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *CultureAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*CultureAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isCultureAdditionType_Amount interface {
	isCultureAdditionType_Amount()
}

type CultureAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,10,opt,name=mass,proto3,oneof"`
}

type CultureAdditionType_Unit struct {
	Unit *UnitType `protobuf:"bytes,11,opt,name=unit,proto3,oneof"`
}

type CultureAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,12,opt,name=volume,proto3,oneof"`
}

func (*CultureAdditionType_Mass) isCultureAdditionType_Amount() {}

func (*CultureAdditionType_Unit) isCultureAdditionType_Amount() {}

func (*CultureAdditionType_Volume) isCultureAdditionType_Amount() {}

// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
type TimingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What time during a process step is added, eg a value of 2 days for a dry hop addition would be added 2 days into the fermentation step.
	Time *TimeType `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// How long an ingredient addition remains, this was referred to as time in the BeerXML standard. E.G. A 40 minute hop boil additions means to boil for 40 minutes, and a 2 day duration for a dry hop means to remove it after 2 days.
	Duration *TimeType `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// A continuous addition is spread out evenly and added during the entire process step, eg 60 minute IPA by dogfish head takes all ofthe hop additions and adds them throughout the entire boil.
	Continuous bool `protobuf:"varint,3,opt,name=continuous,proto3" json:"continuous,omitempty"`
	// Used to indicate when an addition is added based on a desired specific gravity. E.G. Add dry hop at when SG is 1.018.
	SpecificGravity *GravityType `protobuf:"bytes,4,opt,name=specific_gravity,json=specificGravity,proto3" json:"specific_gravity,omitempty"`
	// Used to indicate when an addition is added based on a desired specific gravity. eg Add brett when pH is 3.4.
	Ph *AcidityType `protobuf:"bytes,5,opt,name=ph,proto3" json:"ph,omitempty"`
	// Used to indicate what step this ingredient timing addition is referencing. EG A value of 2 for add_to_fermentation would mean to add during the second fermentation step.
	Step int32              `protobuf:"varint,6,opt,name=step,proto3" json:"step,omitempty"`
	Use  TimingType_UseType `protobuf:"varint,7,opt,name=use,proto3,enum=beerproto.TimingType_UseType" json:"use,omitempty"`
}

func (x *TimingType) Reset() {
	*x = TimingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimingType) ProtoMessage() {}

func (x *TimingType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimingType.ProtoReflect.Descriptor instead.
func (*TimingType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{16}
}

func (x *TimingType) GetTime() *TimeType {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TimingType) GetDuration() *TimeType {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TimingType) GetContinuous() bool {
	if x != nil {
		return x.Continuous
	}
	return false
}

func (x *TimingType) GetSpecificGravity() *GravityType {
	if x != nil {
		return x.SpecificGravity
	}
	return nil
}

func (x *TimingType) GetPh() *AcidityType {
	if x != nil {
		return x.Ph
	}
	return nil
}

func (x *TimingType) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *TimingType) GetUse() TimingType_UseType {
	if x != nil {
		return x.Use
	}
	return TimingType_ADD_TO_MASH
}

// WaterAdditionType collects the attributes of each water addition for use in a recipe
type WaterAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flouride    *ConcentrationType `protobuf:"bytes,1,opt,name=flouride,proto3" json:"flouride,omitempty"`
	Sulfate     *ConcentrationType `protobuf:"bytes,2,opt,name=sulfate,proto3" json:"sulfate,omitempty"`
	Producer    string             `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
	Nitrate     *ConcentrationType `protobuf:"bytes,4,opt,name=nitrate,proto3" json:"nitrate,omitempty"`
	Nitrite     *ConcentrationType `protobuf:"bytes,5,opt,name=nitrite,proto3" json:"nitrite,omitempty"`
	Chloride    *ConcentrationType `protobuf:"bytes,6,opt,name=chloride,proto3" json:"chloride,omitempty"`
	Amount      *VolumeType        `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Name        string             `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Potassium   *ConcentrationType `protobuf:"bytes,9,opt,name=potassium,proto3" json:"potassium,omitempty"`
	Magnesium   *ConcentrationType `protobuf:"bytes,10,opt,name=magnesium,proto3" json:"magnesium,omitempty"`
	Iron        *ConcentrationType `protobuf:"bytes,11,opt,name=iron,proto3" json:"iron,omitempty"`
	Bicarbonate *ConcentrationType `protobuf:"bytes,12,opt,name=bicarbonate,proto3" json:"bicarbonate,omitempty"`
	Calcium     *ConcentrationType `protobuf:"bytes,13,opt,name=calcium,proto3" json:"calcium,omitempty"`
	Carbonate   *ConcentrationType `protobuf:"bytes,14,opt,name=carbonate,proto3" json:"carbonate,omitempty"`
	Sodium      *ConcentrationType `protobuf:"bytes,15,opt,name=sodium,proto3" json:"sodium,omitempty"`
}

func (x *WaterAdditionType) Reset() {
	*x = WaterAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaterAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterAdditionType) ProtoMessage() {}

func (x *WaterAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterAdditionType.ProtoReflect.Descriptor instead.
func (*WaterAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{17}
}

func (x *WaterAdditionType) GetFlouride() *ConcentrationType {
	if x != nil {
		return x.Flouride
	}
	return nil
}

func (x *WaterAdditionType) GetSulfate() *ConcentrationType {
	if x != nil {
		return x.Sulfate
	}
	return nil
}

func (x *WaterAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *WaterAdditionType) GetNitrate() *ConcentrationType {
	if x != nil {
		return x.Nitrate
	}
	return nil
}

func (x *WaterAdditionType) GetNitrite() *ConcentrationType {
	if x != nil {
		return x.Nitrite
	}
	return nil
}

func (x *WaterAdditionType) GetChloride() *ConcentrationType {
	if x != nil {
		return x.Chloride
	}
	return nil
}

func (x *WaterAdditionType) GetAmount() *VolumeType {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *WaterAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WaterAdditionType) GetPotassium() *ConcentrationType {
	if x != nil {
		return x.Potassium
	}
	return nil
}

func (x *WaterAdditionType) GetMagnesium() *ConcentrationType {
	if x != nil {
		return x.Magnesium
	}
	return nil
}

func (x *WaterAdditionType) GetIron() *ConcentrationType {
	if x != nil {
		return x.Iron
	}
	return nil
}

func (x *WaterAdditionType) GetBicarbonate() *ConcentrationType {
	if x != nil {
		return x.Bicarbonate
	}
	return nil
}

func (x *WaterAdditionType) GetCalcium() *ConcentrationType {
	if x != nil {
		return x.Calcium
	}
	return nil
}

func (x *WaterAdditionType) GetCarbonate() *ConcentrationType {
	if x != nil {
		return x.Carbonate
	}
	return nil
}

func (x *WaterAdditionType) GetSodium() *ConcentrationType {
	if x != nil {
		return x.Sodium
	}
	return nil
}

type ConcentrationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                                 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  ConcentrationType_ConcentrationUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.ConcentrationType_ConcentrationUnitType" json:"unit,omitempty"`
}

func (x *ConcentrationType) Reset() {
	*x = ConcentrationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcentrationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcentrationType) ProtoMessage() {}

func (x *ConcentrationType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcentrationType.ProtoReflect.Descriptor instead.
func (*ConcentrationType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{18}
}

func (x *ConcentrationType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConcentrationType) GetUnit() ConcentrationType_ConcentrationUnitType {
	if x != nil {
		return x.Unit
	}
	return ConcentrationType_PPM
}

// FermentableAdditionType collects the attributes of each fermentable ingredient for use in a recipe fermentable bill
type FermentableAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       FermentableAdditionType_FermentableBaseType       `protobuf:"varint,1,opt,name=type,proto3,enum=beerproto.FermentableAdditionType_FermentableBaseType" json:"type,omitempty"`
	Origin     string                                            `protobuf:"bytes,2,opt,name=Origin,proto3" json:"Origin,omitempty"`
	GrainGroup FermentableAdditionType_FermentableBaseGrainGroup `protobuf:"varint,3,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.FermentableAdditionType_FermentableBaseGrainGroup" json:"grain_group,omitempty"`
	Yield      *YieldType                                        `protobuf:"bytes,4,opt,name=yield,proto3" json:"yield,omitempty"`
	Color      *ColorType                                        `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Name       string                                            `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Producer   string                                            `protobuf:"bytes,7,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId  string                                            `protobuf:"bytes,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,9,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are assignable to Amount:
	//	*FermentableAdditionType_Mass
	//	*FermentableAdditionType_Volume
	Amount isFermentableAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *FermentableAdditionType) Reset() {
	*x = FermentableAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableAdditionType) ProtoMessage() {}

func (x *FermentableAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableAdditionType.ProtoReflect.Descriptor instead.
func (*FermentableAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{19}
}

func (x *FermentableAdditionType) GetType() FermentableAdditionType_FermentableBaseType {
	if x != nil {
		return x.Type
	}
	return FermentableAdditionType_DRY_EXTRACT
}

func (x *FermentableAdditionType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FermentableAdditionType) GetGrainGroup() FermentableAdditionType_FermentableBaseGrainGroup {
	if x != nil {
		return x.GrainGroup
	}
	return FermentableAdditionType_BASE
}

func (x *FermentableAdditionType) GetYield() *YieldType {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *FermentableAdditionType) GetColor() *ColorType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FermentableAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentableAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *FermentableAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *FermentableAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (m *FermentableAdditionType) GetAmount() isFermentableAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *FermentableAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*FermentableAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *FermentableAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*FermentableAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isFermentableAdditionType_Amount interface {
	isFermentableAdditionType_Amount()
}

type FermentableAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,10,opt,name=mass,proto3,oneof"`
}

type FermentableAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,11,opt,name=volume,proto3,oneof"`
}

func (*FermentableAdditionType_Mass) isFermentableAdditionType_Amount() {}

func (*FermentableAdditionType_Volume) isFermentableAdditionType_Amount() {}

// The potential yield of the fermentable ingredient, supporting SG, or percentage. eg 1.037 or 80% are valid yield types
type YieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage yield compared to succrose of a fine grind. eg 80%
	FineGrind *PercentType `protobuf:"bytes,1,opt,name=fine_grind,json=fineGrind,proto3" json:"fine_grind,omitempty"`
	// Percentage yield compared to succrose of a coarse grind. eg 78%
	CoarseGrind *PercentType `protobuf:"bytes,2,opt,name=coarse_grind,json=coarseGrind,proto3" json:"coarse_grind,omitempty"`
	// The difference between fine and coarse grind, a difference more than 2 percent can indicate a protein or step mash may be desirable. eg 2%
	FineCoarseDifference *PercentType `protobuf:"bytes,3,opt,name=fine_coarse_difference,json=fineCoarseDifference,proto3" json:"fine_coarse_difference,omitempty"`
	// The potential yield of the fermentable ingredient for 1 lb of grain mashed in 1 gallon of water. eg 1.037
	Potential *GravityType `protobuf:"bytes,4,opt,name=potential,proto3" json:"potential,omitempty"`
}

func (x *YieldType) Reset() {
	*x = YieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YieldType) ProtoMessage() {}

func (x *YieldType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YieldType.ProtoReflect.Descriptor instead.
func (*YieldType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{20}
}

func (x *YieldType) GetFineGrind() *PercentType {
	if x != nil {
		return x.FineGrind
	}
	return nil
}

func (x *YieldType) GetCoarseGrind() *PercentType {
	if x != nil {
		return x.CoarseGrind
	}
	return nil
}

func (x *YieldType) GetFineCoarseDifference() *PercentType {
	if x != nil {
		return x.FineCoarseDifference
	}
	return nil
}

func (x *YieldType) GetPotential() *GravityType {
	if x != nil {
		return x.Potential
	}
	return nil
}

// HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bil
type HopAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetaAcid *PercentType                       `protobuf:"bytes,1,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	Producer string                             `protobuf:"bytes,2,opt,name=producer,proto3" json:"producer,omitempty"`
	Origin   string                             `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	Year     string                             `protobuf:"bytes,4,opt,name=year,proto3" json:"year,omitempty"`
	Form     HopAdditionType_HopVarietyBaseForm `protobuf:"varint,5,opt,name=form,proto3,enum=beerproto.HopAdditionType_HopVarietyBaseForm" json:"form,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
	Timing    *TimingType  `protobuf:"bytes,6,opt,name=timing,proto3" json:"timing,omitempty"`
	Name      string       `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	ProductId string       `protobuf:"bytes,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AlphaAcid *PercentType `protobuf:"bytes,9,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	// Types that are assignable to Amount:
	//	*HopAdditionType_Mass
	//	*HopAdditionType_Volume
	Amount isHopAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *HopAdditionType) Reset() {
	*x = HopAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HopAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopAdditionType) ProtoMessage() {}

func (x *HopAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopAdditionType.ProtoReflect.Descriptor instead.
func (*HopAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{21}
}

func (x *HopAdditionType) GetBetaAcid() *PercentType {
	if x != nil {
		return x.BetaAcid
	}
	return nil
}

func (x *HopAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *HopAdditionType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *HopAdditionType) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *HopAdditionType) GetForm() HopAdditionType_HopVarietyBaseForm {
	if x != nil {
		return x.Form
	}
	return HopAdditionType_EXTRACT
}

func (x *HopAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *HopAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HopAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *HopAdditionType) GetAlphaAcid() *PercentType {
	if x != nil {
		return x.AlphaAcid
	}
	return nil
}

func (m *HopAdditionType) GetAmount() isHopAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *HopAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*HopAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *HopAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*HopAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isHopAdditionType_Amount interface {
	isHopAdditionType_Amount()
}

type HopAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,10,opt,name=mass,proto3,oneof"`
}

type HopAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,11,opt,name=volume,proto3,oneof"`
}

func (*HopAdditionType_Mass) isHopAdditionType_Amount() {}

func (*HopAdditionType_Volume) isHopAdditionType_Amount() {}

type TasteType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes  string  `protobuf:"bytes,1,opt,name=notes,proto3" json:"notes,omitempty"`
	Rating float64 `protobuf:"fixed64,2,opt,name=rating,proto3" json:"rating,omitempty"`
}

func (x *TasteType) Reset() {
	*x = TasteType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasteType) ProtoMessage() {}

func (x *TasteType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasteType.ProtoReflect.Descriptor instead.
func (*TasteType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{22}
}

func (x *TasteType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *TasteType) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

// MiscellaneousType collects the attributes of an ingredient to store as record information
type MiscellaneousType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
	UseFor    string                                  `protobuf:"bytes,1,opt,name=use_for,json=useFor,proto3" json:"use_for,omitempty"`
	Notes     string                                  `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	Name      string                                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Producer  string                                  `protobuf:"bytes,4,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId string                                  `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type      MiscellaneousType_MiscellaneousBaseType `protobuf:"varint,6,opt,name=type,proto3,enum=beerproto.MiscellaneousType_MiscellaneousBaseType" json:"type,omitempty"`
	Inventory *MiscellaneousInventoryType             `protobuf:"bytes,7,opt,name=inventory,proto3" json:"inventory,omitempty"`
}

func (x *MiscellaneousType) Reset() {
	*x = MiscellaneousType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousType) ProtoMessage() {}

func (x *MiscellaneousType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousType.ProtoReflect.Descriptor instead.
func (*MiscellaneousType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{23}
}

func (x *MiscellaneousType) GetUseFor() string {
	if x != nil {
		return x.UseFor
	}
	return ""
}

func (x *MiscellaneousType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MiscellaneousType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiscellaneousType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *MiscellaneousType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MiscellaneousType) GetType() MiscellaneousType_MiscellaneousBaseType {
	if x != nil {
		return x.Type
	}
	return MiscellaneousType_SPICE
}

func (x *MiscellaneousType) GetInventory() *MiscellaneousInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

type MiscellaneousInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//	*MiscellaneousInventoryType_Mass
	//	*MiscellaneousInventoryType_Unit
	//	*MiscellaneousInventoryType_Volume
	Amount isMiscellaneousInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *MiscellaneousInventoryType) Reset() {
	*x = MiscellaneousInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousInventoryType) ProtoMessage() {}

func (x *MiscellaneousInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousInventoryType.ProtoReflect.Descriptor instead.
func (*MiscellaneousInventoryType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{24}
}

func (m *MiscellaneousInventoryType) GetAmount() isMiscellaneousInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetUnit() *UnitType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isMiscellaneousInventoryType_Amount interface {
	isMiscellaneousInventoryType_Amount()
}

type MiscellaneousInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type MiscellaneousInventoryType_Unit struct {
	Unit *UnitType `protobuf:"bytes,2,opt,name=unit,proto3,oneof"`
}

type MiscellaneousInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,3,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousInventoryType_Mass) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Unit) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Volume) isMiscellaneousInventoryType_Amount() {}

// StyleType provide information for Style categorization
type StyleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aroma                        string                    `protobuf:"bytes,1,opt,name=aroma,proto3" json:"aroma,omitempty"`
	Ingredients                  string                    `protobuf:"bytes,2,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	CategoryNumber               int32                     `protobuf:"varint,3,opt,name=category_number,json=categoryNumber,proto3" json:"category_number,omitempty"`
	Notes                        string                    `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	Flavor                       string                    `protobuf:"bytes,5,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Mouthfeel                    string                    `protobuf:"bytes,6,opt,name=mouthfeel,proto3" json:"mouthfeel,omitempty"`
	FinalGravity                 *GravityRangeType         `protobuf:"bytes,7,opt,name=final_gravity,json=finalGravity,proto3" json:"final_gravity,omitempty"`
	StyleGuide                   string                    `protobuf:"bytes,8,opt,name=style_guide,json=styleGuide,proto3" json:"style_guide,omitempty"`
	Color                        *ColorRangeType           `protobuf:"bytes,9,opt,name=color,proto3" json:"color,omitempty"`
	OriginalGravity              *ColorRangeType           `protobuf:"bytes,10,opt,name=original_gravity,json=originalGravity,proto3" json:"original_gravity,omitempty"`
	Examples                     string                    `protobuf:"bytes,11,opt,name=examples,proto3" json:"examples,omitempty"`
	Name                         string                    `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	Carbonation                  *CarbonationRangeType     `protobuf:"bytes,13,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	AlcoholByVolume              *PercentRangeType         `protobuf:"bytes,14,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	InternationalBitternessUnits *BitternessRangeType      `protobuf:"bytes,15,opt,name=international_bitterness_units,json=internationalBitternessUnits,proto3" json:"international_bitterness_units,omitempty"`
	Appearance                   string                    `protobuf:"bytes,16,opt,name=appearance,proto3" json:"appearance,omitempty"`
	Category                     string                    `protobuf:"bytes,17,opt,name=category,proto3" json:"category,omitempty"`
	StyleLetter                  string                    `protobuf:"bytes,18,opt,name=style_letter,json=styleLetter,proto3" json:"style_letter,omitempty"`
	Type                         StyleType_StyleCategories `protobuf:"varint,19,opt,name=type,proto3,enum=beerproto.StyleType_StyleCategories" json:"type,omitempty"`
	OverallImpression            string                    `protobuf:"bytes,20,opt,name=overall_impression,json=overallImpression,proto3" json:"overall_impression,omitempty"`
}

func (x *StyleType) Reset() {
	*x = StyleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleType) ProtoMessage() {}

func (x *StyleType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleType.ProtoReflect.Descriptor instead.
func (*StyleType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{25}
}

func (x *StyleType) GetAroma() string {
	if x != nil {
		return x.Aroma
	}
	return ""
}

func (x *StyleType) GetIngredients() string {
	if x != nil {
		return x.Ingredients
	}
	return ""
}

func (x *StyleType) GetCategoryNumber() int32 {
	if x != nil {
		return x.CategoryNumber
	}
	return 0
}

func (x *StyleType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *StyleType) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *StyleType) GetMouthfeel() string {
	if x != nil {
		return x.Mouthfeel
	}
	return ""
}

func (x *StyleType) GetFinalGravity() *GravityRangeType {
	if x != nil {
		return x.FinalGravity
	}
	return nil
}

func (x *StyleType) GetStyleGuide() string {
	if x != nil {
		return x.StyleGuide
	}
	return ""
}

func (x *StyleType) GetColor() *ColorRangeType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *StyleType) GetOriginalGravity() *ColorRangeType {
	if x != nil {
		return x.OriginalGravity
	}
	return nil
}

func (x *StyleType) GetExamples() string {
	if x != nil {
		return x.Examples
	}
	return ""
}

func (x *StyleType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StyleType) GetCarbonation() *CarbonationRangeType {
	if x != nil {
		return x.Carbonation
	}
	return nil
}

func (x *StyleType) GetAlcoholByVolume() *PercentRangeType {
	if x != nil {
		return x.AlcoholByVolume
	}
	return nil
}

func (x *StyleType) GetInternationalBitternessUnits() *BitternessRangeType {
	if x != nil {
		return x.InternationalBitternessUnits
	}
	return nil
}

func (x *StyleType) GetAppearance() string {
	if x != nil {
		return x.Appearance
	}
	return ""
}

func (x *StyleType) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *StyleType) GetStyleLetter() string {
	if x != nil {
		return x.StyleLetter
	}
	return ""
}

func (x *StyleType) GetType() StyleType_StyleCategories {
	if x != nil {
		return x.Type
	}
	return StyleType_BEER
}

func (x *StyleType) GetOverallImpression() string {
	if x != nil {
		return x.OverallImpression
	}
	return ""
}

type BitternessRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *BitternessType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *BitternessType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *BitternessRangeType) Reset() {
	*x = BitternessRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitternessRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitternessRangeType) ProtoMessage() {}

func (x *BitternessRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitternessRangeType.ProtoReflect.Descriptor instead.
func (*BitternessRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{26}
}

func (x *BitternessRangeType) GetMinimum() *BitternessType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *BitternessRangeType) GetMaximum() *BitternessType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type BitternessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                           `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  BitternessType_BitternessUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.BitternessType_BitternessUnitType" json:"unit,omitempty"`
}

func (x *BitternessType) Reset() {
	*x = BitternessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitternessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitternessType) ProtoMessage() {}

func (x *BitternessType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitternessType.ProtoReflect.Descriptor instead.
func (*BitternessType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{27}
}

func (x *BitternessType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BitternessType) GetUnit() BitternessType_BitternessUnitType {
	if x != nil {
		return x.Unit
	}
	return BitternessType_IBUs
}

type PercentRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *PercentType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *PercentType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *PercentRangeType) Reset() {
	*x = PercentRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentRangeType) ProtoMessage() {}

func (x *PercentRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentRangeType.ProtoReflect.Descriptor instead.
func (*PercentRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{28}
}

func (x *PercentRangeType) GetMinimum() *PercentType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *PercentRangeType) GetMaximum() *PercentType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type PercentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  PercentType_PercentUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.PercentType_PercentUnitType" json:"unit,omitempty"`
}

func (x *PercentType) Reset() {
	*x = PercentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentType) ProtoMessage() {}

func (x *PercentType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentType.ProtoReflect.Descriptor instead.
func (*PercentType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{29}
}

func (x *PercentType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PercentType) GetUnit() PercentType_PercentUnitType {
	if x != nil {
		return x.Unit
	}
	return PercentType_PERCENT_SIGN
}

type GravityRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *GravityType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *GravityType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *GravityRangeType) Reset() {
	*x = GravityRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravityRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravityRangeType) ProtoMessage() {}

func (x *GravityRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravityRangeType.ProtoReflect.Descriptor instead.
func (*GravityRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{30}
}

func (x *GravityRangeType) GetMinimum() *GravityType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *GravityRangeType) GetMaximum() *GravityType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

// Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity
type GravityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  GravityType_GravityUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.GravityType_GravityUnitType" json:"unit,omitempty"`
}

func (x *GravityType) Reset() {
	*x = GravityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravityType) ProtoMessage() {}

func (x *GravityType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravityType.ProtoReflect.Descriptor instead.
func (*GravityType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{31}
}

func (x *GravityType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GravityType) GetUnit() GravityType_GravityUnitType {
	if x != nil {
		return x.Unit
	}
	return GravityType_SG
}

type ColorRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *ColorType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *ColorType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *ColorRangeType) Reset() {
	*x = ColorRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorRangeType) ProtoMessage() {}

func (x *ColorRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorRangeType.ProtoReflect.Descriptor instead.
func (*ColorRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{32}
}

func (x *ColorRangeType) GetMinimum() *ColorType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *ColorRangeType) GetMaximum() *ColorType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

// ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC
type ColorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  ColorType_ColorUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.ColorType_ColorUnitType" json:"unit,omitempty"`
}

func (x *ColorType) Reset() {
	*x = ColorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorType) ProtoMessage() {}

func (x *ColorType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorType.ProtoReflect.Descriptor instead.
func (*ColorType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{33}
}

func (x *ColorType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ColorType) GetUnit() ColorType_ColorUnitType {
	if x != nil {
		return x.Unit
	}
	return ColorType_EBC
}

type CarbonationRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *CarbonationType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *CarbonationType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *CarbonationRangeType) Reset() {
	*x = CarbonationRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarbonationRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarbonationRangeType) ProtoMessage() {}

func (x *CarbonationRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarbonationRangeType.ProtoReflect.Descriptor instead.
func (*CarbonationRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{34}
}

func (x *CarbonationRangeType) GetMinimum() *CarbonationType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *CarbonationRangeType) GetMaximum() *CarbonationType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type CarbonationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                             `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  CarbonationType_CarbonationUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.CarbonationType_CarbonationUnitType" json:"unit,omitempty"`
}

func (x *CarbonationType) Reset() {
	*x = CarbonationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarbonationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarbonationType) ProtoMessage() {}

func (x *CarbonationType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarbonationType.ProtoReflect.Descriptor instead.
func (*CarbonationType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{35}
}

func (x *CarbonationType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CarbonationType) GetUnit() CarbonationType_CarbonationUnitType {
	if x != nil {
		return x.Unit
	}
	return CarbonationType_VOLS
}

// FermentationProcedureType defines the procedure for performing fermentation
type FermentationProcedureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description       string                  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Notes             string                  `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	FermentationSteps []*FermentationStepType `protobuf:"bytes,3,rep,name=fermentation_steps,json=fermentationSteps,proto3" json:"fermentation_steps,omitempty"`
	Name              string                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FermentationProcedureType) Reset() {
	*x = FermentationProcedureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentationProcedureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentationProcedureType) ProtoMessage() {}

func (x *FermentationProcedureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentationProcedureType.ProtoReflect.Descriptor instead.
func (*FermentationProcedureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{36}
}

func (x *FermentationProcedureType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FermentationProcedureType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *FermentationProcedureType) GetFermentationSteps() []*FermentationStepType {
	if x != nil {
		return x.FermentationSteps
	}
	return nil
}

func (x *FermentationProcedureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// FermentationStepType - a per step representation of a fermentation action
type FermentationStepType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string           `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,2,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	StepTime       *TimeType        `protobuf:"bytes,3,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// Free rise is used to indicate a fermentation step where the exothermic fermentation is allowed to raise the temperature without restriction This is either True or false.
	FreeRise         bool             `protobuf:"varint,4,opt,name=free_rise,json=freeRise,proto3" json:"free_rise,omitempty"`
	StartGravity     *GravityType     `protobuf:"bytes,5,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	EndGravity       *GravityType     `protobuf:"bytes,6,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	StartPh          *AcidityType     `protobuf:"bytes,7,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	Description      string           `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	StartTemperature *TemperatureType `protobuf:"bytes,9,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	EndPh            *AcidityType     `protobuf:"bytes,10,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Vessel           string           `protobuf:"bytes,11,opt,name=vessel,proto3" json:"vessel,omitempty"`
}

func (x *FermentationStepType) Reset() {
	*x = FermentationStepType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentationStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentationStepType) ProtoMessage() {}

func (x *FermentationStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentationStepType.ProtoReflect.Descriptor instead.
func (*FermentationStepType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{37}
}

func (x *FermentationStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentationStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *FermentationStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *FermentationStepType) GetFreeRise() bool {
	if x != nil {
		return x.FreeRise
	}
	return false
}

func (x *FermentationStepType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *FermentationStepType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *FermentationStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *FermentationStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FermentationStepType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

func (x *FermentationStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *FermentationStepType) GetVessel() string {
	if x != nil {
		return x.Vessel
	}
	return ""
}

// BoilProcedureType defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
type BoilProcedureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreBoilSize *VolumeType     `protobuf:"bytes,1,opt,name=pre_boil_size,json=preBoilSize,proto3" json:"pre_boil_size,omitempty"`
	BoilTime    *TimeType       `protobuf:"bytes,2,opt,name=boil_time,json=boilTime,proto3" json:"boil_time,omitempty"`
	BoilSteps   []*BoilStepType `protobuf:"bytes,3,rep,name=boil_steps,json=boilSteps,proto3" json:"boil_steps,omitempty"`
	Name        string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Notes       string          `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *BoilProcedureType) Reset() {
	*x = BoilProcedureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoilProcedureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoilProcedureType) ProtoMessage() {}

func (x *BoilProcedureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoilProcedureType.ProtoReflect.Descriptor instead.
func (*BoilProcedureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{38}
}

func (x *BoilProcedureType) GetPreBoilSize() *VolumeType {
	if x != nil {
		return x.PreBoilSize
	}
	return nil
}

func (x *BoilProcedureType) GetBoilTime() *TimeType {
	if x != nil {
		return x.BoilTime
	}
	return nil
}

func (x *BoilProcedureType) GetBoilSteps() []*BoilStepType {
	if x != nil {
		return x.BoilSteps
	}
	return nil
}

func (x *BoilProcedureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoilProcedureType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BoilProcedureType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// BoilStepType - a per step representation of a boil process, can be used to support preboil steps, non-boiling pasteurization steps, boiling, whirlpool steps, and chilling
type BoilStepType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndGravity     *GravityType                          `protobuf:"bytes,1,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	ChillingType   BoilStepType_BoilStepTypeChillingType `protobuf:"varint,2,opt,name=chilling_type,json=chillingType,proto3,enum=beerproto.BoilStepType_BoilStepTypeChillingType" json:"chilling_type,omitempty"`
	Description    string                                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	EndTemperature *TemperatureType                      `protobuf:"bytes,4,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	// The amount of time that passes before this step begins. eg moving from a boiling step (step 1) to a whirlpool step (step 2) may take 5 minutes. Step 2 would have a ramp time of 5 minutes, hop isomerization and bitterness calculations will need to account for this accordingly.
	RampTime         *TimeType        `protobuf:"bytes,5,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	StepTime         *TimeType        `protobuf:"bytes,6,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	StartGravity     *GravityType     `protobuf:"bytes,7,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	StartPh          *AcidityType     `protobuf:"bytes,8,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	EndPh            *AcidityType     `protobuf:"bytes,9,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Name             string           `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	StartTemperature *TemperatureType `protobuf:"bytes,11,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
}

func (x *BoilStepType) Reset() {
	*x = BoilStepType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoilStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoilStepType) ProtoMessage() {}

func (x *BoilStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoilStepType.ProtoReflect.Descriptor instead.
func (*BoilStepType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{39}
}

func (x *BoilStepType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *BoilStepType) GetChillingType() BoilStepType_BoilStepTypeChillingType {
	if x != nil {
		return x.ChillingType
	}
	return BoilStepType_BATCH
}

func (x *BoilStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BoilStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *BoilStepType) GetRampTime() *TimeType {
	if x != nil {
		return x.RampTime
	}
	return nil
}

func (x *BoilStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *BoilStepType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *BoilStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *BoilStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *BoilStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoilStepType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

// FermentableType collects the attributes of a fermentable ingredient to store as record information
type FermentableType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The recommended maximum percentage to use in a grain bill.
	MaxInBatch *PercentType `protobuf:"bytes,1,opt,name=max_in_batch,json=maxInBatch,proto3" json:"max_in_batch,omitempty"`
	// True if the fermentable must be mashed, false if it can be steeped.
	RecommendMash bool `protobuf:"varint,2,opt,name=recommend_mash,json=recommendMash,proto3" json:"recommend_mash,omitempty"`
	// The percentage of protein. Higher values may indicate a possibility of haze, or lautering issues.
	Protein    *PercentType                              `protobuf:"bytes,3,opt,name=protein,proto3" json:"protein,omitempty"`
	ProductId  string                                    `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	GrainGroup FermentableType_FermentableBaseGrainGroup `protobuf:"varint,5,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.FermentableType_FermentableBaseGrainGroup" json:"grain_group,omitempty"`
	Yield      *YieldType                                `protobuf:"bytes,6,opt,name=yield,proto3" json:"yield,omitempty"`
	Type       FermentableType_FermentableBaseType       `protobuf:"varint,7,opt,name=type,proto3,enum=beerproto.FermentableType_FermentableBaseType" json:"type,omitempty"`
	Producer   string                                    `protobuf:"bytes,8,opt,name=producer,proto3" json:"producer,omitempty"`
	// Where diastatic power gives the total amount of all enzymes, alpha amylase, also known as dextrinizing units, refers to only the total amount of alpa amylase in the malted grain. A value of 25-50 is desirable for base malt.
	AlphaAmylase float64    `protobuf:"fixed64,9,opt,name=alpha_amylase,json=alphaAmylase,proto3" json:"alpha_amylase,omitempty"`
	Color        *ColorType `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Name         string     `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable.
	DiastaticPower *DiastaticPowerType       `protobuf:"bytes,12,opt,name=diastatic_power,json=diastaticPower,proto3" json:"diastatic_power,omitempty"`
	Moisture       *PercentType              `protobuf:"bytes,13,opt,name=moisture,proto3" json:"moisture,omitempty"`
	Origin         string                    `protobuf:"bytes,14,opt,name=origin,proto3" json:"origin,omitempty"`
	Inventory      *FermentableInventoryType `protobuf:"bytes,15,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// The Kolbach Index, also known as soluble to total ratio of nitrogen or protein, is used to indcate the degree of malt modification. A value above 35% is desired for simple single infusion mashing, undermodified malt may require multiple step mashes or decoction.
	KolbachIndex float64 `protobuf:"fixed64,16,opt,name=kolbach_index,json=kolbachIndex,proto3" json:"kolbach_index,omitempty"`
	Notes        string  `protobuf:"bytes,17,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *FermentableType) Reset() {
	*x = FermentableType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableType) ProtoMessage() {}

func (x *FermentableType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableType.ProtoReflect.Descriptor instead.
func (*FermentableType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{40}
}

func (x *FermentableType) GetMaxInBatch() *PercentType {
	if x != nil {
		return x.MaxInBatch
	}
	return nil
}

func (x *FermentableType) GetRecommendMash() bool {
	if x != nil {
		return x.RecommendMash
	}
	return false
}

func (x *FermentableType) GetProtein() *PercentType {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *FermentableType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *FermentableType) GetGrainGroup() FermentableType_FermentableBaseGrainGroup {
	if x != nil {
		return x.GrainGroup
	}
	return FermentableType_BASE
}

func (x *FermentableType) GetYield() *YieldType {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *FermentableType) GetType() FermentableType_FermentableBaseType {
	if x != nil {
		return x.Type
	}
	return FermentableType_DRY_EXTRACT
}

func (x *FermentableType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *FermentableType) GetAlphaAmylase() float64 {
	if x != nil {
		return x.AlphaAmylase
	}
	return 0
}

func (x *FermentableType) GetColor() *ColorType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FermentableType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentableType) GetDiastaticPower() *DiastaticPowerType {
	if x != nil {
		return x.DiastaticPower
	}
	return nil
}

func (x *FermentableType) GetMoisture() *PercentType {
	if x != nil {
		return x.Moisture
	}
	return nil
}

func (x *FermentableType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FermentableType) GetInventory() *FermentableInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *FermentableType) GetKolbachIndex() float64 {
	if x != nil {
		return x.KolbachIndex
	}
	return 0
}

func (x *FermentableType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type FermentableInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//	*FermentableInventoryType_Mass
	//	*FermentableInventoryType_Volume
	Amount isFermentableInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *FermentableInventoryType) Reset() {
	*x = FermentableInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableInventoryType) ProtoMessage() {}

func (x *FermentableInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableInventoryType.ProtoReflect.Descriptor instead.
func (*FermentableInventoryType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{41}
}

func (m *FermentableInventoryType) GetAmount() isFermentableInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *FermentableInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*FermentableInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *FermentableInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*FermentableInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isFermentableInventoryType_Amount interface {
	isFermentableInventoryType_Amount()
}

type FermentableInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type FermentableInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*FermentableInventoryType_Mass) isFermentableInventoryType_Amount() {}

func (*FermentableInventoryType_Volume) isFermentableInventoryType_Amount() {}

// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts
type DiastaticPowerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                                   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  DiastaticPowerType_DiastaticPowerUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.DiastaticPowerType_DiastaticPowerUnitType" json:"unit,omitempty"`
}

func (x *DiastaticPowerType) Reset() {
	*x = DiastaticPowerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiastaticPowerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiastaticPowerType) ProtoMessage() {}

func (x *DiastaticPowerType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiastaticPowerType.ProtoReflect.Descriptor instead.
func (*DiastaticPowerType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{42}
}

func (x *DiastaticPowerType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DiastaticPowerType) GetUnit() DiastaticPowerType_DiastaticPowerUnitType {
	if x != nil {
		return x.Unit
	}
	return DiastaticPowerType_lintner
}

// CultureInformation collects the attributes of a microbial culture
type CultureInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Form     CultureInformation_CultureBaseForm `protobuf:"varint,1,opt,name=form,proto3,enum=beerproto.CultureInformation_CultureBaseForm" json:"form,omitempty"`
	Producer string                             `protobuf:"bytes,2,opt,name=producer,proto3" json:"producer,omitempty"`
	// The recommended temperature range of fermentation by the culture producer.
	TemperatureRange *TemperatureRangeType `protobuf:"bytes,3,opt,name=temperature_range,json=temperatureRange,proto3" json:"temperature_range,omitempty"`
	Notes            string                `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	// Recommended styles for a particular culture.
	BestFor   string                `protobuf:"bytes,5,opt,name=best_for,json=bestFor,proto3" json:"best_for,omitempty"`
	Inventory *CultureInventoryType `protobuf:"bytes,6,opt,name=inventory,proto3" json:"inventory,omitempty"`
	ProductId string                `protobuf:"bytes,7,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Name      string                `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// The recommended limit of abv by the culture producer before attenuation stops.
	AlcoholTolerance *PercentType `protobuf:"bytes,9,opt,name=alcohol_tolerance,json=alcoholTolerance,proto3" json:"alcohol_tolerance,omitempty"`
	// A glucoamylase positive culture is capable of producing glucoamylase, the enzyme produced through expression of the diastatic gene, which allows yeast to attenuate dextrins and starches leading to a very low FG. This is positive in some saison/brett yeasts as well as the new gulo hybrid by Omega yeast labs.
	Glucoamylase bool                               `protobuf:"varint,10,opt,name=glucoamylase,proto3" json:"glucoamylase,omitempty"`
	Type         CultureInformation_CultureBaseType `protobuf:"varint,11,opt,name=type,proto3,enum=beerproto.CultureInformation_CultureBaseType" json:"type,omitempty"`
	// Floculation refers to the ability of yeast to aggregate to form large flocs which drop out of suspension.
	Flocculation     CultureInformation_QualitativeRangeType `protobuf:"varint,12,opt,name=flocculation,proto3,enum=beerproto.CultureInformation_QualitativeRangeType" json:"flocculation,omitempty"`
	AttenuationRange *PercentRangeType                       `protobuf:"bytes,13,opt,name=attenuation_range,json=attenuationRange,proto3" json:"attenuation_range,omitempty"`
	// Maximum number of times to reuse a culture before a new lab source is recommended.
	MaxReuse int32 `protobuf:"varint,14,opt,name=max_reuse,json=maxReuse,proto3" json:"max_reuse,omitempty"`
	// A POF+ culture is capable of producing phenols, which is a common distinctive property of saison, and brett yeasts.
	Pof      bool      `protobuf:"varint,15,opt,name=pof,proto3" json:"pof,omitempty"`
	Zymocide *Zymocide `protobuf:"bytes,16,opt,name=zymocide,proto3" json:"zymocide,omitempty"`
}

func (x *CultureInformation) Reset() {
	*x = CultureInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CultureInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CultureInformation) ProtoMessage() {}

func (x *CultureInformation) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CultureInformation.ProtoReflect.Descriptor instead.
func (*CultureInformation) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{43}
}

func (x *CultureInformation) GetForm() CultureInformation_CultureBaseForm {
	if x != nil {
		return x.Form
	}
	return CultureInformation_LIQUID
}

func (x *CultureInformation) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *CultureInformation) GetTemperatureRange() *TemperatureRangeType {
	if x != nil {
		return x.TemperatureRange
	}
	return nil
}

func (x *CultureInformation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *CultureInformation) GetBestFor() string {
	if x != nil {
		return x.BestFor
	}
	return ""
}

func (x *CultureInformation) GetInventory() *CultureInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *CultureInformation) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CultureInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CultureInformation) GetAlcoholTolerance() *PercentType {
	if x != nil {
		return x.AlcoholTolerance
	}
	return nil
}

func (x *CultureInformation) GetGlucoamylase() bool {
	if x != nil {
		return x.Glucoamylase
	}
	return false
}

func (x *CultureInformation) GetType() CultureInformation_CultureBaseType {
	if x != nil {
		return x.Type
	}
	return CultureInformation_ALE
}

func (x *CultureInformation) GetFlocculation() CultureInformation_QualitativeRangeType {
	if x != nil {
		return x.Flocculation
	}
	return CultureInformation_VERY_LOW
}

func (x *CultureInformation) GetAttenuationRange() *PercentRangeType {
	if x != nil {
		return x.AttenuationRange
	}
	return nil
}

func (x *CultureInformation) GetMaxReuse() int32 {
	if x != nil {
		return x.MaxReuse
	}
	return 0
}

func (x *CultureInformation) GetPof() bool {
	if x != nil {
		return x.Pof
	}
	return false
}

func (x *CultureInformation) GetZymocide() *Zymocide {
	if x != nil {
		return x.Zymocide
	}
	return nil
}

type TemperatureRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *TemperatureType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *TemperatureType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *TemperatureRangeType) Reset() {
	*x = TemperatureRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureRangeType) ProtoMessage() {}

func (x *TemperatureRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureRangeType.ProtoReflect.Descriptor instead.
func (*TemperatureRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{44}
}

func (x *TemperatureRangeType) GetMinimum() *TemperatureType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *TemperatureRangeType) GetMaximum() *TemperatureType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type TemperatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                             `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  TemperatureType_TemperatureUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.TemperatureType_TemperatureUnitType" json:"unit,omitempty"`
}

func (x *TemperatureType) Reset() {
	*x = TemperatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureType) ProtoMessage() {}

func (x *TemperatureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureType.ProtoReflect.Descriptor instead.
func (*TemperatureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{45}
}

func (x *TemperatureType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TemperatureType) GetUnit() TemperatureType_TemperatureUnitType {
	if x != nil {
		return x.Unit
	}
	return TemperatureType_C
}

// Zymocide, also known as killer yeast properties, is common among wine yeast. There are also some ale and brett yeasts that are immune to some zymocidic properties, these are known as killer neutral
type Zymocide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No1     bool `protobuf:"varint,1,opt,name=no1,proto3" json:"no1,omitempty"`
	No2     bool `protobuf:"varint,2,opt,name=no2,proto3" json:"no2,omitempty"`
	No28    bool `protobuf:"varint,3,opt,name=no28,proto3" json:"no28,omitempty"`
	Klus    bool `protobuf:"varint,4,opt,name=klus,proto3" json:"klus,omitempty"`
	Neutral bool `protobuf:"varint,5,opt,name=neutral,proto3" json:"neutral,omitempty"`
}

func (x *Zymocide) Reset() {
	*x = Zymocide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zymocide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zymocide) ProtoMessage() {}

func (x *Zymocide) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zymocide.ProtoReflect.Descriptor instead.
func (*Zymocide) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{46}
}

func (x *Zymocide) GetNo1() bool {
	if x != nil {
		return x.No1
	}
	return false
}

func (x *Zymocide) GetNo2() bool {
	if x != nil {
		return x.No2
	}
	return false
}

func (x *Zymocide) GetNo28() bool {
	if x != nil {
		return x.No28
	}
	return false
}

func (x *Zymocide) GetKlus() bool {
	if x != nil {
		return x.Klus
	}
	return false
}

func (x *Zymocide) GetNeutral() bool {
	if x != nil {
		return x.Neutral
	}
	return false
}

type CultureInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liquid  *VolumeType `protobuf:"bytes,1,opt,name=liquid,proto3" json:"liquid,omitempty"`
	Dry     *MassType   `protobuf:"bytes,2,opt,name=dry,proto3" json:"dry,omitempty"`
	Slant   *VolumeType `protobuf:"bytes,3,opt,name=slant,proto3" json:"slant,omitempty"`
	Culture *VolumeType `protobuf:"bytes,4,opt,name=culture,proto3" json:"culture,omitempty"`
}

func (x *CultureInventoryType) Reset() {
	*x = CultureInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CultureInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CultureInventoryType) ProtoMessage() {}

func (x *CultureInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CultureInventoryType.ProtoReflect.Descriptor instead.
func (*CultureInventoryType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{47}
}

func (x *CultureInventoryType) GetLiquid() *VolumeType {
	if x != nil {
		return x.Liquid
	}
	return nil
}

func (x *CultureInventoryType) GetDry() *MassType {
	if x != nil {
		return x.Dry
	}
	return nil
}

func (x *CultureInventoryType) GetSlant() *VolumeType {
	if x != nil {
		return x.Slant
	}
	return nil
}

func (x *CultureInventoryType) GetCulture() *VolumeType {
	if x != nil {
		return x.Culture
	}
	return nil
}

// Provides necessary information for brewing equipment set
type EquipmentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EquipmentItems []*EquipmentItemType `protobuf:"bytes,2,rep,name=equipment_items,json=equipmentItems,proto3" json:"equipment_items,omitempty"`
}

func (x *EquipmentType) Reset() {
	*x = EquipmentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentType) ProtoMessage() {}

func (x *EquipmentType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentType.ProtoReflect.Descriptor instead.
func (*EquipmentType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{48}
}

func (x *EquipmentType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquipmentType) GetEquipmentItems() []*EquipmentItemType {
	if x != nil {
		return x.EquipmentItems
	}
	return nil
}

// EquipmentType provides necessary information for individual brewing equipment
type EquipmentItemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes string `protobuf:"bytes,1,opt,name=notes,proto3" json:"notes,omitempty"`
	// The volume boiled off during 1 hour, measured before and after at room temperature.
	BoilRatePerHour *VolumeType                         `protobuf:"bytes,2,opt,name=boil_rate_per_hour,json=boilRatePerHour,proto3" json:"boil_rate_per_hour,omitempty"`
	Type            string                              `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Form            EquipmentItemType_EquipmentBaseForm `protobuf:"varint,4,opt,name=form,proto3,enum=beerproto.EquipmentItemType_EquipmentBaseForm" json:"form,omitempty"`
	// The volume that leaves the kettle, especially important for non-immersion chillers that cool the wort as it leaves the kettle.
	DrainRatePerMinute *VolumeType `protobuf:"bytes,5,opt,name=drain_rate_per_minute,json=drainRatePerMinute,proto3" json:"drain_rate_per_minute,omitempty"`
	// The specific heat of the piece of equipment, expressed in Cal/(g*C), especially important for when the mashtun is not preheated.
	SpecificHeat *SpecificHeatType `protobuf:"bytes,6,opt,name=specific_heat,json=specificHeat,proto3" json:"specific_heat,omitempty"`
	// The apparent volume absorbed by grain, typical values are 0.125 qt/lb (1.04 L/kg) for a mashtun, 0.08 gal/lb (0.66 L/kg) for BIAB.
	GrainAbsorptionRate *SpecificVolumeType `protobuf:"bytes,7,opt,name=grain_absorption_rate,json=grainAbsorptionRate,proto3" json:"grain_absorption_rate,omitempty"`
	Name                string              `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	MaximumVolume       *VolumeType         `protobuf:"bytes,9,opt,name=maximum_volume,json=maximumVolume,proto3" json:"maximum_volume,omitempty"`
	// The weight of the piece of equipment, especially important for when the mashtun is not preheated.
	Weight *MassType   `protobuf:"bytes,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Loss   *VolumeType `protobuf:"bytes,11,opt,name=loss,proto3" json:"loss,omitempty"`
}

func (x *EquipmentItemType) Reset() {
	*x = EquipmentItemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentItemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentItemType) ProtoMessage() {}

func (x *EquipmentItemType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentItemType.ProtoReflect.Descriptor instead.
func (*EquipmentItemType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{49}
}

func (x *EquipmentItemType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *EquipmentItemType) GetBoilRatePerHour() *VolumeType {
	if x != nil {
		return x.BoilRatePerHour
	}
	return nil
}

func (x *EquipmentItemType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EquipmentItemType) GetForm() EquipmentItemType_EquipmentBaseForm {
	if x != nil {
		return x.Form
	}
	return EquipmentItemType_HLT
}

func (x *EquipmentItemType) GetDrainRatePerMinute() *VolumeType {
	if x != nil {
		return x.DrainRatePerMinute
	}
	return nil
}

func (x *EquipmentItemType) GetSpecificHeat() *SpecificHeatType {
	if x != nil {
		return x.SpecificHeat
	}
	return nil
}

func (x *EquipmentItemType) GetGrainAbsorptionRate() *SpecificVolumeType {
	if x != nil {
		return x.GrainAbsorptionRate
	}
	return nil
}

func (x *EquipmentItemType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquipmentItemType) GetMaximumVolume() *VolumeType {
	if x != nil {
		return x.MaximumVolume
	}
	return nil
}

func (x *EquipmentItemType) GetWeight() *MassType {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *EquipmentItemType) GetLoss() *VolumeType {
	if x != nil {
		return x.Loss
	}
	return nil
}

type SpecificHeatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  SpecificHeatType_SpecificHeatUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.SpecificHeatType_SpecificHeatUnitType" json:"unit,omitempty"`
}

func (x *SpecificHeatType) Reset() {
	*x = SpecificHeatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificHeatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificHeatType) ProtoMessage() {}

func (x *SpecificHeatType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificHeatType.ProtoReflect.Descriptor instead.
func (*SpecificHeatType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{50}
}

func (x *SpecificHeatType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SpecificHeatType) GetUnit() SpecificHeatType_SpecificHeatUnitType {
	if x != nil {
		return x.Unit
	}
	return SpecificHeatType_CALGC
}

// Describes the procedure for packaging your beverage
type PackagingProcedureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PackagedVolume   *VolumeType            `protobuf:"bytes,2,opt,name=packaged_volume,json=packagedVolume,proto3" json:"packaged_volume,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Notes            string                 `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	PackagingVessels []*PackagingVesselType `protobuf:"bytes,5,rep,name=packaging_vessels,json=packagingVessels,proto3" json:"packaging_vessels,omitempty"`
}

func (x *PackagingProcedureType) Reset() {
	*x = PackagingProcedureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagingProcedureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagingProcedureType) ProtoMessage() {}

func (x *PackagingProcedureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagingProcedureType.ProtoReflect.Descriptor instead.
func (*PackagingProcedureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{51}
}

func (x *PackagingProcedureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackagingProcedureType) GetPackagedVolume() *VolumeType {
	if x != nil {
		return x.PackagedVolume
	}
	return nil
}

func (x *PackagingProcedureType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackagingProcedureType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *PackagingProcedureType) GetPackagingVessels() []*PackagingVesselType {
	if x != nil {
		return x.PackagingVessels
	}
	return nil
}

// PackagingVesselType - a per vessel representation of a packaging process
type PackagingVesselType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             PackagingVesselType_PackagingVesselTypeType `protobuf:"varint,1,opt,name=type,proto3,enum=beerproto.PackagingVesselType_PackagingVesselTypeType" json:"type,omitempty"`
	StartGravity     *GravityType                                `protobuf:"bytes,2,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	Name             string                                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PackageDate      string                                      `protobuf:"bytes,4,opt,name=package_date,json=packageDate,proto3" json:"package_date,omitempty"`
	StepTime         *TimeType                                   `protobuf:"bytes,5,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	EndGravity       *GravityType                                `protobuf:"bytes,6,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	VesselVolume     *VolumeType                                 `protobuf:"bytes,7,opt,name=vessel_volume,json=vesselVolume,proto3" json:"vessel_volume,omitempty"`
	VesselQuantity   float64                                     `protobuf:"fixed64,8,opt,name=vessel_quantity,json=vesselQuantity,proto3" json:"vessel_quantity,omitempty"`
	Description      string                                      `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	StartPh          *AcidityType                                `protobuf:"bytes,10,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	Carbonation      float64                                     `protobuf:"fixed64,11,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	StartTemperature *TemperatureType                            `protobuf:"bytes,12,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	EndPh            *AcidityType                                `protobuf:"bytes,13,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	EndTemperature   *TemperatureType                            `protobuf:"bytes,14,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
}

func (x *PackagingVesselType) Reset() {
	*x = PackagingVesselType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagingVesselType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagingVesselType) ProtoMessage() {}

func (x *PackagingVesselType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagingVesselType.ProtoReflect.Descriptor instead.
func (*PackagingVesselType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{52}
}

func (x *PackagingVesselType) GetType() PackagingVesselType_PackagingVesselTypeType {
	if x != nil {
		return x.Type
	}
	return PackagingVesselType_KEG
}

func (x *PackagingVesselType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *PackagingVesselType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackagingVesselType) GetPackageDate() string {
	if x != nil {
		return x.PackageDate
	}
	return ""
}

func (x *PackagingVesselType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *PackagingVesselType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *PackagingVesselType) GetVesselVolume() *VolumeType {
	if x != nil {
		return x.VesselVolume
	}
	return nil
}

func (x *PackagingVesselType) GetVesselQuantity() float64 {
	if x != nil {
		return x.VesselQuantity
	}
	return 0
}

func (x *PackagingVesselType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackagingVesselType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *PackagingVesselType) GetCarbonation() float64 {
	if x != nil {
		return x.Carbonation
	}
	return 0
}

func (x *PackagingVesselType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

func (x *PackagingVesselType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *PackagingVesselType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

// VarietyInformation collects the attributes of a hop variety to store as record information
type VarietyInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inventory *HopInventoryType                         `protobuf:"bytes,1,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Type      VarietyInformation_VarietyInformationType `protobuf:"varint,2,opt,name=type,proto3,enum=beerproto.VarietyInformation_VarietyInformationType" json:"type,omitempty"`
	// Oil Content information object.
	OilContent *OilContentType `protobuf:"bytes,3,opt,name=oil_content,json=oilContent,proto3" json:"oil_content,omitempty"`
	//  Defined as the percentage of hop alpha lost in 6 months of storage.
	PercentLost *PercentType                          `protobuf:"bytes,4,opt,name=percent_lost,json=percentLost,proto3" json:"percent_lost,omitempty"`
	ProductId   string                                `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AlphaAcid   *PercentType                          `protobuf:"bytes,6,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	BetaAcid    *PercentType                          `protobuf:"bytes,7,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	Name        string                                `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Origin      string                                `protobuf:"bytes,9,opt,name=origin,proto3" json:"origin,omitempty"`
	Substitutes string                                `protobuf:"bytes,10,opt,name=substitutes,proto3" json:"substitutes,omitempty"`
	Year        string                                `protobuf:"bytes,11,opt,name=year,proto3" json:"year,omitempty"`
	Form        VarietyInformation_HopVarietyBaseForm `protobuf:"varint,12,opt,name=form,proto3,enum=beerproto.VarietyInformation_HopVarietyBaseForm" json:"form,omitempty"`
	Producer    string                                `protobuf:"bytes,13,opt,name=producer,proto3" json:"producer,omitempty"`
	Notes       string                                `protobuf:"bytes,14,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *VarietyInformation) Reset() {
	*x = VarietyInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarietyInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarietyInformation) ProtoMessage() {}

func (x *VarietyInformation) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarietyInformation.ProtoReflect.Descriptor instead.
func (*VarietyInformation) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{53}
}

func (x *VarietyInformation) GetInventory() *HopInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *VarietyInformation) GetType() VarietyInformation_VarietyInformationType {
	if x != nil {
		return x.Type
	}
	return VarietyInformation_AROMA
}

func (x *VarietyInformation) GetOilContent() *OilContentType {
	if x != nil {
		return x.OilContent
	}
	return nil
}

func (x *VarietyInformation) GetPercentLost() *PercentType {
	if x != nil {
		return x.PercentLost
	}
	return nil
}

func (x *VarietyInformation) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *VarietyInformation) GetAlphaAcid() *PercentType {
	if x != nil {
		return x.AlphaAcid
	}
	return nil
}

func (x *VarietyInformation) GetBetaAcid() *PercentType {
	if x != nil {
		return x.BetaAcid
	}
	return nil
}

func (x *VarietyInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VarietyInformation) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *VarietyInformation) GetSubstitutes() string {
	if x != nil {
		return x.Substitutes
	}
	return ""
}

func (x *VarietyInformation) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *VarietyInformation) GetForm() VarietyInformation_HopVarietyBaseForm {
	if x != nil {
		return x.Form
	}
	return VarietyInformation_EXTRACT
}

func (x *VarietyInformation) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *VarietyInformation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type HopInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//	*HopInventoryType_Mass
	//	*HopInventoryType_Volume
	Amount isHopInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *HopInventoryType) Reset() {
	*x = HopInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HopInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopInventoryType) ProtoMessage() {}

func (x *HopInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopInventoryType.ProtoReflect.Descriptor instead.
func (*HopInventoryType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{54}
}

func (m *HopInventoryType) GetAmount() isHopInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *HopInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*HopInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *HopInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*HopInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isHopInventoryType_Amount interface {
	isHopInventoryType_Amount()
}

type HopInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type HopInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*HopInventoryType_Mass) isHopInventoryType_Amount() {}

func (*HopInventoryType_Volume) isHopInventoryType_Amount() {}

// oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement
type OilContentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Polyphenols *PercentType `protobuf:"bytes,1,opt,name=polyphenols,proto3" json:"polyphenols,omitempty"`
	// The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.
	TotalOilMlPer_100G float64      `protobuf:"fixed64,2,opt,name=total_oil_ml_per_100g,json=totalOilMlPer100g,proto3" json:"total_oil_ml_per_100g,omitempty"`
	Farnesene          *PercentType `protobuf:"bytes,3,opt,name=farnesene,proto3" json:"farnesene,omitempty"`
	Limonene           *PercentType `protobuf:"bytes,4,opt,name=limonene,proto3" json:"limonene,omitempty"`
	Nerol              *PercentType `protobuf:"bytes,5,opt,name=nerol,proto3" json:"nerol,omitempty"`
	Geraniol           *PercentType `protobuf:"bytes,6,opt,name=geraniol,proto3" json:"geraniol,omitempty"`
	BPinene            *PercentType `protobuf:"bytes,7,opt,name=b_pinene,json=bPinene,proto3" json:"b_pinene,omitempty"`
	Linalool           *PercentType `protobuf:"bytes,8,opt,name=linalool,proto3" json:"linalool,omitempty"`
	Caryophyllene      *PercentType `protobuf:"bytes,9,opt,name=caryophyllene,proto3" json:"caryophyllene,omitempty"`
	Cohumulone         *PercentType `protobuf:"bytes,10,opt,name=cohumulone,proto3" json:"cohumulone,omitempty"`
	Xanthohumol        *PercentType `protobuf:"bytes,11,opt,name=xanthohumol,proto3" json:"xanthohumol,omitempty"`
	Humulene           *PercentType `protobuf:"bytes,12,opt,name=humulene,proto3" json:"humulene,omitempty"`
	Myrcene            *PercentType `protobuf:"bytes,13,opt,name=myrcene,proto3" json:"myrcene,omitempty"`
	Pinene             *PercentType `protobuf:"bytes,14,opt,name=pinene,proto3" json:"pinene,omitempty"`
}

func (x *OilContentType) Reset() {
	*x = OilContentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OilContentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OilContentType) ProtoMessage() {}

func (x *OilContentType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OilContentType.ProtoReflect.Descriptor instead.
func (*OilContentType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{55}
}

func (x *OilContentType) GetPolyphenols() *PercentType {
	if x != nil {
		return x.Polyphenols
	}
	return nil
}

func (x *OilContentType) GetTotalOilMlPer_100G() float64 {
	if x != nil {
		return x.TotalOilMlPer_100G
	}
	return 0
}

func (x *OilContentType) GetFarnesene() *PercentType {
	if x != nil {
		return x.Farnesene
	}
	return nil
}

func (x *OilContentType) GetLimonene() *PercentType {
	if x != nil {
		return x.Limonene
	}
	return nil
}

func (x *OilContentType) GetNerol() *PercentType {
	if x != nil {
		return x.Nerol
	}
	return nil
}

func (x *OilContentType) GetGeraniol() *PercentType {
	if x != nil {
		return x.Geraniol
	}
	return nil
}

func (x *OilContentType) GetBPinene() *PercentType {
	if x != nil {
		return x.BPinene
	}
	return nil
}

func (x *OilContentType) GetLinalool() *PercentType {
	if x != nil {
		return x.Linalool
	}
	return nil
}

func (x *OilContentType) GetCaryophyllene() *PercentType {
	if x != nil {
		return x.Caryophyllene
	}
	return nil
}

func (x *OilContentType) GetCohumulone() *PercentType {
	if x != nil {
		return x.Cohumulone
	}
	return nil
}

func (x *OilContentType) GetXanthohumol() *PercentType {
	if x != nil {
		return x.Xanthohumol
	}
	return nil
}

func (x *OilContentType) GetHumulene() *PercentType {
	if x != nil {
		return x.Humulene
	}
	return nil
}

func (x *OilContentType) GetMyrcene() *PercentType {
	if x != nil {
		return x.Myrcene
	}
	return nil
}

func (x *OilContentType) GetPinene() *PercentType {
	if x != nil {
		return x.Pinene
	}
	return nil
}

// WaterBase provides unique properties to identify individual records of  brewing water
type WaterBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calcium     *ConcentrationType `protobuf:"bytes,1,opt,name=calcium,proto3" json:"calcium,omitempty"`
	Nitrite     *ConcentrationType `protobuf:"bytes,2,opt,name=nitrite,proto3" json:"nitrite,omitempty"`
	Chloride    *ConcentrationType `protobuf:"bytes,3,opt,name=chloride,proto3" json:"chloride,omitempty"`
	Name        string             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Potassium   *ConcentrationType `protobuf:"bytes,5,opt,name=potassium,proto3" json:"potassium,omitempty"`
	Carbonate   *ConcentrationType `protobuf:"bytes,6,opt,name=carbonate,proto3" json:"carbonate,omitempty"`
	Iron        *ConcentrationType `protobuf:"bytes,7,opt,name=iron,proto3" json:"iron,omitempty"`
	Flouride    *ConcentrationType `protobuf:"bytes,8,opt,name=flouride,proto3" json:"flouride,omitempty"`
	Sulfate     *ConcentrationType `protobuf:"bytes,9,opt,name=sulfate,proto3" json:"sulfate,omitempty"`
	Magnesium   *ConcentrationType `protobuf:"bytes,10,opt,name=magnesium,proto3" json:"magnesium,omitempty"`
	Producer    string             `protobuf:"bytes,11,opt,name=producer,proto3" json:"producer,omitempty"`
	Bicarbonate *ConcentrationType `protobuf:"bytes,12,opt,name=bicarbonate,proto3" json:"bicarbonate,omitempty"`
	Nitrate     *ConcentrationType `protobuf:"bytes,13,opt,name=nitrate,proto3" json:"nitrate,omitempty"`
	Sodium      *ConcentrationType `protobuf:"bytes,14,opt,name=sodium,proto3" json:"sodium,omitempty"`
}

func (x *WaterBase) Reset() {
	*x = WaterBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaterBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterBase) ProtoMessage() {}

func (x *WaterBase) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterBase.ProtoReflect.Descriptor instead.
func (*WaterBase) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{56}
}

func (x *WaterBase) GetCalcium() *ConcentrationType {
	if x != nil {
		return x.Calcium
	}
	return nil
}

func (x *WaterBase) GetNitrite() *ConcentrationType {
	if x != nil {
		return x.Nitrite
	}
	return nil
}

func (x *WaterBase) GetChloride() *ConcentrationType {
	if x != nil {
		return x.Chloride
	}
	return nil
}

func (x *WaterBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WaterBase) GetPotassium() *ConcentrationType {
	if x != nil {
		return x.Potassium
	}
	return nil
}

func (x *WaterBase) GetCarbonate() *ConcentrationType {
	if x != nil {
		return x.Carbonate
	}
	return nil
}

func (x *WaterBase) GetIron() *ConcentrationType {
	if x != nil {
		return x.Iron
	}
	return nil
}

func (x *WaterBase) GetFlouride() *ConcentrationType {
	if x != nil {
		return x.Flouride
	}
	return nil
}

func (x *WaterBase) GetSulfate() *ConcentrationType {
	if x != nil {
		return x.Sulfate
	}
	return nil
}

func (x *WaterBase) GetMagnesium() *ConcentrationType {
	if x != nil {
		return x.Magnesium
	}
	return nil
}

func (x *WaterBase) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *WaterBase) GetBicarbonate() *ConcentrationType {
	if x != nil {
		return x.Bicarbonate
	}
	return nil
}

func (x *WaterBase) GetNitrate() *ConcentrationType {
	if x != nil {
		return x.Nitrate
	}
	return nil
}

func (x *WaterBase) GetSodium() *ConcentrationType {
	if x != nil {
		return x.Sodium
	}
	return nil
}

var File_beer_proto protoreflect.FileDescriptor

var file_beer_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6d, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x19, 0x6d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x18, 0x6d, 0x69, 0x73, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x6f, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x69, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0d,
	0x68, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x68, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xa0, 0x06, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x72, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65,
	0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x48, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x48, 0x12, 0x2d, 0x0a,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x48, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x50, 0x48, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x68, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x10, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22,
	0x84, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x43, 0x4f, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41,
	0x53, 0x48, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x57, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x5f,
	0x4d, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50,
	0x41, 0x52, 0x47, 0x45, 0x10, 0x06, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22,
	0x50, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x45, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10,
	0x06, 0x22, 0x7a, 0x0a, 0x0b, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0x19, 0x0a, 0x0f, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x48, 0x10, 0x00, 0x22, 0xf6, 0x01,
	0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x97, 0x01, 0x0a,
	0x0e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x4d, 0x4c, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x4c, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x53, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x42, 0x53, 0x50, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x4f, 0x5a, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x55, 0x50, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x54, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02,
	0x51, 0x54, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x42, 0x4c, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x46, 0x4f, 0x5a, 0x10, 0x0a,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x50, 0x54, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x51, 0x54,
	0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x47, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x42, 0x42, 0x4c, 0x10, 0x0e, 0x22, 0xe0, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x6a, 0x0a,
	0x16, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x51, 0x54, 0x4c, 0x42, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x4c, 0x4c, 0x42, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x41, 0x4c, 0x4f, 0x5a, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x47, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x4b, 0x47, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x4f, 0x5a,
	0x4f, 0x5a, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x33, 0x4b, 0x47, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x54, 0x33, 0x4c, 0x42, 0x10, 0x07, 0x22, 0xc7, 0x0a, 0x0a, 0x0a, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x62, 0x75, 0x5f, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x42, 0x55, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x62, 0x75, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x48, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x62, 0x65, 0x65, 0x72,
	0x50, 0x48, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x0c, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x68,
	0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x69, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x62,
	0x6f, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x73, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x61, 0x73, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x11, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x61, 0x70, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x80, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x49, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4b, 0x4f, 0x4d, 0x42, 0x55, 0x43, 0x48, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x4f, 0x44, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x49, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41,
	0x53, 0x48, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x52, 0x41, 0x49,
	0x4e, 0x10, 0x08, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x06, 0x6c, 0x61, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x75, 0x74, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x09, 0x62, 0x72,
	0x65, 0x77, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x72, 0x65, 0x77, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x22, 0xcc, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x22, 0x5c, 0x0a, 0x0f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x45, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x63, 0x69, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4d, 0x42,
	0x55, 0x43, 0x48, 0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x41, 0x44, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x44, 0x41, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49,
	0x4e, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x22,
	0x93, 0x01, 0x0a, 0x0f, 0x49, 0x42, 0x55, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x42, 0x55, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x49, 0x42, 0x55, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x3e, 0x0a, 0x0d, 0x49, 0x42, 0x55, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x61, 0x67, 0x65, 0x72, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x68, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x61, 0x72, 0x65, 0x74, 0x7a, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0x03, 0x22, 0x9e, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x17, 0x6d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e,
	0x65, 0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x16, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x75, 0x6c, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x15,
	0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x14, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe6, 0x03, 0x0a, 0x19, 0x4d, 0x69, 0x73, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e,
	0x65, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x15, 0x4d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45,
	0x52, 0x42, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x06, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x8d, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x35, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x47, 0x10, 0x00,
	0x12, 0x05, 0x0a, 0x01, 0x47, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x47, 0x10, 0x02, 0x12,
	0x06, 0x0a, 0x02, 0x4c, 0x42, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x5a, 0x10, 0x04, 0x22,
	0x9f, 0x01, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x47, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45,
	0x41, 0x43, 0x48, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4b, 0x47, 0x10,
	0x04, 0x22, 0xc2, 0x06, 0x0a, 0x13, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63,
	0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x43,
	0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x6c, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x43, 0x75, 0x6c, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49,
	0x51, 0x55, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55,
	0x4c, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x45, 0x47, 0x53,
	0x10, 0x04, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x52, 0x45, 0x54, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x4d,
	0x50, 0x41, 0x47, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x56, 0x45, 0x49, 0x4b,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x43, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x41, 0x47, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x4c, 0x4f,
	0x4c, 0x41, 0x43, 0x54, 0x49, 0x43, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x58, 0x45,
	0x44, 0x5f, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x45, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x45, 0x44, 0x49, 0x4f, 0x10,
	0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x4f, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53,
	0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x4e, 0x45, 0x10, 0x0c, 0x42, 0x08, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x03, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12,
	0x41, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x02, 0x70, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x70, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x2f,
	0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x75, 0x73, 0x65, 0x22,
	0x58, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44,
	0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x03, 0x22, 0xa2, 0x06, 0x0a, 0x11, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x66, 0x6c, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6c,
	0x66, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x6c, 0x66, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x07, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x63, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63,
	0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x6f,
	0x74, 0x61, 0x73, 0x73, 0x69, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x74,
	0x61, 0x73, 0x73, 0x69, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x73,
	0x69, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x73, 0x69,
	0x75, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x72, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x69, 0x72, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x69, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x63, 0x61, 0x72, 0x62, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x75, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x64, 0x69,
	0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x22, 0xa5,
	0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0x32, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x50, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x50, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x47, 0x4c, 0x10, 0x02, 0x22, 0x84, 0x06, 0x0a, 0x17, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x5d, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x47,
	0x72, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x13, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x47, 0x41, 0x52,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x52, 0x55, 0x49, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x4e, 0x45,
	0x59, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x22, 0x73,
	0x0a, 0x19, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x4c,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4d,
	0x4f, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x4a, 0x55, 0x4e, 0x43,
	0x54, 0x10, 0x06, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x02,
	0x0a, 0x09, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x66,
	0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x69,
	0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x47, 0x72, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a,
	0x16, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x61, 0x72, 0x73,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x70,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x22, 0xad, 0x04, 0x0a, 0x0f, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x61, 0x63,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x62, 0x65, 0x74, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x41, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x70,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x48, 0x6f, 0x70,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x12, 0x48, 0x6f,
	0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x45, 0x41, 0x46, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x45, 0x41, 0x46, 0x5f,
	0x57, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x4c, 0x4c, 0x45, 0x54, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x57, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x4c, 0x55, 0x47, 0x10, 0x05, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x39, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x8a, 0x03, 0x0a,
	0x11, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x6e, 0x65, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x6a, 0x0a,
	0x15, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x49, 0x43, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x45, 0x52, 0x42, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x4d, 0x69,
	0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdb, 0x07, 0x0a, 0x09, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6f, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x66,
	0x65, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x74, 0x68,
	0x66, 0x65, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x47,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x63, 0x6f, 0x68,
	0x6f, 0x6c, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x1e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x0f, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x45, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x49, 0x44, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x4f, 0x4d, 0x42, 0x55, 0x43, 0x48, 0x41, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x44, 0x41, 0x10, 0x05, 0x12, 0x08, 0x0a,
	0x04, 0x57, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x22, 0x7f, 0x0a, 0x13, 0x42, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x22, 0x1e, 0x0a, 0x12, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x42, 0x55,
	0x73, 0x10, 0x00, 0x22, 0x76, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x84, 0x01, 0x0a, 0x0b,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x23, 0x0a,
	0x0f, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x10, 0x00, 0x22, 0x76, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x47,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3a, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x2e, 0x0a, 0x0f,
	0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x53, 0x47, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x54, 0x4f,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x52, 0x49, 0x58, 0x10, 0x02, 0x22, 0x70, 0x0a, 0x0e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x2e,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x86,
	0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x42, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x56, 0x49, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x52, 0x4d, 0x10, 0x02, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x62,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x8c, 0x01, 0x0a,
	0x0f, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x1f, 0x0a, 0x13, 0x43, 0x61,
	0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x4c, 0x53, 0x10, 0x00, 0x22, 0xb7, 0x01, 0x0a, 0x19,
	0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x12, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x14, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72,
	0x65, 0x65, 0x52, 0x69, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x22, 0x84, 0x02, 0x0a, 0x11, 0x42, 0x6f, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x62,
	0x6f, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x42, 0x6f, 0x69, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x6f, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x69, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x6f, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x62, 0x6f, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x98, 0x05, 0x0a, 0x0c, 0x42, 0x6f, 0x69,
	0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x42, 0x6f, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x68, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x50, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x31, 0x0a, 0x18, 0x42, 0x6f, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x22, 0x89, 0x08, 0x0a, 0x0f, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2a, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x59, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x61, 0x6d, 0x79, 0x6c, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x41, 0x6d, 0x79, 0x6c, 0x61, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x46, 0x0a, 0x0f, 0x64, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x61, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x6f, 0x69,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x6f, 0x6c, 0x62,
	0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x6b, 0x6f, 0x6c, 0x62, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x13, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52,
	0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x41, 0x49,
	0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x47, 0x41, 0x52, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x52, 0x55, 0x49, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x55, 0x49,
	0x43, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x22, 0x73, 0x0a, 0x19, 0x46, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f,
	0x41, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x41, 0x4c, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4d, 0x4f, 0x4b, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x4a, 0x55, 0x4e, 0x43, 0x54, 0x10, 0x06, 0x22,
	0x80, 0x01, 0x0a, 0x18, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x48, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x69, 0x61,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x2d, 0x0a, 0x16, 0x44, 0x69, 0x61,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x74, 0x6e, 0x65, 0x72, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x57, 0x4b, 0x10, 0x01, 0x22, 0x8c, 0x09, 0x0a, 0x12, 0x43, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x12, 0x3d, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x11, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6c, 0x75, 0x63, 0x6f, 0x61, 0x6d, 0x79,
	0x6c, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x6c, 0x75, 0x63,
	0x6f, 0x61, 0x6d, 0x79, 0x6c, 0x61, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x66,
	0x6c, 0x6f, 0x63, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x6c, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x63, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x75, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x6f, 0x66, 0x12, 0x2f, 0x0a, 0x08,
	0x7a, 0x79, 0x6d, 0x6f, 0x63, 0x69, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x79, 0x6d, 0x6f, 0x63,
	0x69, 0x64, 0x65, 0x52, 0x08, 0x7a, 0x79, 0x6d, 0x6f, 0x63, 0x69, 0x64, 0x65, 0x22, 0x73, 0x0a,
	0x14, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x06, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x52, 0x45, 0x54, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x4d,
	0x50, 0x41, 0x47, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x56, 0x45, 0x49, 0x4b,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x43, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x41, 0x47, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x4c, 0x4f,
	0x4c, 0x41, 0x43, 0x54, 0x49, 0x43, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x58, 0x45,
	0x44, 0x5f, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x45, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x45, 0x44, 0x49, 0x4f, 0x10,
	0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x4f, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53,
	0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x4e, 0x45, 0x10, 0x0c, 0x22, 0x49, 0x0a, 0x0f,
	0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x52, 0x45, 0x47, 0x53, 0x10, 0x04, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x90, 0x01, 0x0a,
	0x0f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x23, 0x0a, 0x13, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x46, 0x10, 0x01, 0x22,
	0x70, 0x0a, 0x08, 0x5a, 0x79, 0x6d, 0x6f, 0x63, 0x69, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x6f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x31, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x6f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x32, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e,
	0x6f, 0x32, 0x38, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x6c, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6b, 0x6c, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x64, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x64, 0x72, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6a,
	0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd3, 0x05, 0x0a, 0x11, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x62, 0x6f, 0x69, 0x6c, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x62, 0x6f, 0x69, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x48, 0x0a, 0x15, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x12, 0x51,
	0x0a, 0x15, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x72, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x67, 0x72,
	0x61, 0x69, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x72, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x29, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x11,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41,
	0x53, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x52, 0x45, 0x57,
	0x5f, 0x4b, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x45, 0x52,
	0x4d, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x56, 0x45, 0x53, 0x53, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x53, 0x53, 0x45, 0x4c, 0x10, 0x06,
	0x22, 0xa7, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48,
	0x65, 0x61, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x22, 0x37, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x4c,
	0x47, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x4b, 0x47, 0x4b, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x54, 0x55, 0x4c, 0x42, 0x46, 0x10, 0x02, 0x22, 0xf1, 0x01, 0x0a, 0x16, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x22, 0xb4,
	0x06, 0x0a, 0x13, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x50, 0x68, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x59, 0x0a, 0x17, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x47, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41,
	0x53, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x49, 0x52, 0x4b, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x05, 0x22, 0xeb, 0x06, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x70, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6f, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x09, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x65, 0x74, 0x61, 0x41,
	0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x5a, 0x0a,
	0x12, 0x48, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x41, 0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45,
	0x41, 0x46, 0x57, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x4c, 0x4c, 0x45,
	0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x57, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4c, 0x55, 0x47, 0x10, 0x05, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x56, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52,
	0x4f, 0x4d, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x41,
	0x56, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x5f, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52, 0x4f, 0x4d, 0x41,
	0x5f, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f,
	0x52, 0x10, 0x06, 0x22, 0x78, 0x0a, 0x10, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x05,
	0x0a, 0x0e, 0x4f, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x69, 0x6c, 0x5f, 0x6d, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x31,
	0x30, 0x30, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x69, 0x6c, 0x4d, 0x6c, 0x50, 0x65, 0x72, 0x31, 0x30, 0x30, 0x67, 0x12, 0x34, 0x0a, 0x09,
	0x66, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x65,
	0x6e, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x6f, 0x6e, 0x65, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69,
	0x6d, 0x6f, 0x6e, 0x65, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x65, 0x72, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6e,
	0x65, 0x72, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x67, 0x65, 0x72, 0x61, 0x6e, 0x69, 0x6f, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x67, 0x65, 0x72, 0x61, 0x6e, 0x69, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x5f, 0x70, 0x69,
	0x6e, 0x65, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x62, 0x50, 0x69, 0x6e, 0x65, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c,
	0x69, 0x6e, 0x61, 0x6c, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x61, 0x6c, 0x6f, 0x6f, 0x6c, 0x12,
	0x3c, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x79, 0x6f, 0x70, 0x68, 0x79, 0x6c, 0x6c, 0x65, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x63, 0x61, 0x72, 0x79, 0x6f, 0x70, 0x68, 0x79, 0x6c, 0x6c, 0x65, 0x6e, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x63, 0x6f, 0x68, 0x75, 0x6d, 0x75, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x68, 0x75, 0x6d,
	0x75, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x78, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x68,
	0x75, 0x6d, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x78, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x68, 0x75, 0x6d, 0x6f, 0x6c, 0x12,
	0x32, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x75, 0x6c, 0x65, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x75, 0x6c,
	0x65, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x79, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x79,
	0x72, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x65, 0x6e, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x70,
	0x69, 0x6e, 0x65, 0x6e, 0x65, 0x22, 0xeb, 0x05, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x69, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x69, 0x75, 0x6d, 0x12, 0x3a, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x72, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x72, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x66,
	0x6c, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x6c, 0x6f,
	0x75, 0x72, 0x69, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6c, 0x66, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x6c, 0x66, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x73, 0x69, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x61, 0x67, 0x6e, 0x65, 0x73, 0x69, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x69, 0x63, 0x61, 0x72, 0x62, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x63, 0x61, 0x72, 0x62,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x64,
	0x69, 0x75, 0x6d, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beer_proto_rawDescOnce sync.Once
	file_beer_proto_rawDescData = file_beer_proto_rawDesc
)

func file_beer_proto_rawDescGZIP() []byte {
	file_beer_proto_rawDescOnce.Do(func() {
		file_beer_proto_rawDescData = protoimpl.X.CompressGZIP(file_beer_proto_rawDescData)
	})
	return file_beer_proto_rawDescData
}

var file_beer_proto_enumTypes = make([]protoimpl.EnumInfo, 38)
var file_beer_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_beer_proto_goTypes = []interface{}{
	(MashStepType_MashStepTypeType)(0),                     // 0: beerproto.MashStepType.MashStepTypeType
	(TimeType_TimeUnitType)(0),                             // 1: beerproto.TimeType.TimeUnitType
	(AcidityType_AcidityUnitType)(0),                       // 2: beerproto.AcidityType.AcidityUnitType
	(VolumeType_VolumeUnitType)(0),                         // 3: beerproto.VolumeType.VolumeUnitType
	(SpecificVolumeType_SpecificVolumeUnitType)(0),         // 4: beerproto.SpecificVolumeType.SpecificVolumeUnitType
	(RecipeType_RecipeTypeType)(0),                         // 5: beerproto.RecipeType.RecipeTypeType
	(RecipeStyleType_StyleCategories)(0),                   // 6: beerproto.RecipeStyleType.StyleCategories
	(IBUEstimateType_IBUMethodType)(0),                     // 7: beerproto.IBUEstimateType.IBUMethodType
	(MiscellaneousAdditionType_MiscellaneousBaseType)(0),   // 8: beerproto.MiscellaneousAdditionType.MiscellaneousBaseType
	(MassType_MassUnitType)(0),                             // 9: beerproto.MassType.MassUnitType
	(UnitType_UnitUnitType)(0),                             // 10: beerproto.UnitType.UnitUnitType
	(CultureAdditionType_CultureBaseForm)(0),               // 11: beerproto.CultureAdditionType.CultureBaseForm
	(CultureAdditionType_CultureBaseType)(0),               // 12: beerproto.CultureAdditionType.CultureBaseType
	(TimingType_UseType)(0),                                // 13: beerproto.TimingType.UseType
	(ConcentrationType_ConcentrationUnitType)(0),           // 14: beerproto.ConcentrationType.ConcentrationUnitType
	(FermentableAdditionType_FermentableBaseType)(0),       // 15: beerproto.FermentableAdditionType.FermentableBaseType
	(FermentableAdditionType_FermentableBaseGrainGroup)(0), // 16: beerproto.FermentableAdditionType.FermentableBaseGrainGroup
	(HopAdditionType_HopVarietyBaseForm)(0),                // 17: beerproto.HopAdditionType.HopVarietyBaseForm
	(MiscellaneousType_MiscellaneousBaseType)(0),           // 18: beerproto.MiscellaneousType.MiscellaneousBaseType
	(StyleType_StyleCategories)(0),                         // 19: beerproto.StyleType.StyleCategories
	(BitternessType_BitternessUnitType)(0),                 // 20: beerproto.BitternessType.BitternessUnitType
	(PercentType_PercentUnitType)(0),                       // 21: beerproto.PercentType.PercentUnitType
	(GravityType_GravityUnitType)(0),                       // 22: beerproto.GravityType.GravityUnitType
	(ColorType_ColorUnitType)(0),                           // 23: beerproto.ColorType.ColorUnitType
	(CarbonationType_CarbonationUnitType)(0),               // 24: beerproto.CarbonationType.CarbonationUnitType
	(BoilStepType_BoilStepTypeChillingType)(0),             // 25: beerproto.BoilStepType.BoilStepTypeChillingType
	(FermentableType_FermentableBaseType)(0),               // 26: beerproto.FermentableType.FermentableBaseType
	(FermentableType_FermentableBaseGrainGroup)(0),         // 27: beerproto.FermentableType.FermentableBaseGrainGroup
	(DiastaticPowerType_DiastaticPowerUnitType)(0),         // 28: beerproto.DiastaticPowerType.DiastaticPowerUnitType
	(CultureInformation_QualitativeRangeType)(0),           // 29: beerproto.CultureInformation.QualitativeRangeType
	(CultureInformation_CultureBaseType)(0),                // 30: beerproto.CultureInformation.CultureBaseType
	(CultureInformation_CultureBaseForm)(0),                // 31: beerproto.CultureInformation.CultureBaseForm
	(TemperatureType_TemperatureUnitType)(0),               // 32: beerproto.TemperatureType.TemperatureUnitType
	(EquipmentItemType_EquipmentBaseForm)(0),               // 33: beerproto.EquipmentItemType.EquipmentBaseForm
	(SpecificHeatType_SpecificHeatUnitType)(0),             // 34: beerproto.SpecificHeatType.SpecificHeatUnitType
	(PackagingVesselType_PackagingVesselTypeType)(0),       // 35: beerproto.PackagingVesselType.PackagingVesselTypeType
	(VarietyInformation_HopVarietyBaseForm)(0),             // 36: beerproto.VarietyInformation.HopVarietyBaseForm
	(VarietyInformation_VarietyInformationType)(0),         // 37: beerproto.VarietyInformation.VarietyInformationType
	(*Recipe)(nil),                     // 38: beerproto.Recipe
	(*MashProcedureType)(nil),          // 39: beerproto.MashProcedureType
	(*MashStepType)(nil),               // 40: beerproto.MashStepType
	(*TimeType)(nil),                   // 41: beerproto.TimeType
	(*AcidityType)(nil),                // 42: beerproto.AcidityType
	(*VolumeType)(nil),                 // 43: beerproto.VolumeType
	(*SpecificVolumeType)(nil),         // 44: beerproto.SpecificVolumeType
	(*RecipeType)(nil),                 // 45: beerproto.RecipeType
	(*EfficiencyType)(nil),             // 46: beerproto.EfficiencyType
	(*RecipeStyleType)(nil),            // 47: beerproto.RecipeStyleType
	(*IBUEstimateType)(nil),            // 48: beerproto.IBUEstimateType
	(*IngredientsType)(nil),            // 49: beerproto.IngredientsType
	(*MiscellaneousAdditionType)(nil),  // 50: beerproto.MiscellaneousAdditionType
	(*MassType)(nil),                   // 51: beerproto.MassType
	(*UnitType)(nil),                   // 52: beerproto.UnitType
	(*CultureAdditionType)(nil),        // 53: beerproto.CultureAdditionType
	(*TimingType)(nil),                 // 54: beerproto.TimingType
	(*WaterAdditionType)(nil),          // 55: beerproto.WaterAdditionType
	(*ConcentrationType)(nil),          // 56: beerproto.ConcentrationType
	(*FermentableAdditionType)(nil),    // 57: beerproto.FermentableAdditionType
	(*YieldType)(nil),                  // 58: beerproto.YieldType
	(*HopAdditionType)(nil),            // 59: beerproto.HopAdditionType
	(*TasteType)(nil),                  // 60: beerproto.TasteType
	(*MiscellaneousType)(nil),          // 61: beerproto.MiscellaneousType
	(*MiscellaneousInventoryType)(nil), // 62: beerproto.MiscellaneousInventoryType
	(*StyleType)(nil),                  // 63: beerproto.StyleType
	(*BitternessRangeType)(nil),        // 64: beerproto.BitternessRangeType
	(*BitternessType)(nil),             // 65: beerproto.BitternessType
	(*PercentRangeType)(nil),           // 66: beerproto.PercentRangeType
	(*PercentType)(nil),                // 67: beerproto.PercentType
	(*GravityRangeType)(nil),           // 68: beerproto.GravityRangeType
	(*GravityType)(nil),                // 69: beerproto.GravityType
	(*ColorRangeType)(nil),             // 70: beerproto.ColorRangeType
	(*ColorType)(nil),                  // 71: beerproto.ColorType
	(*CarbonationRangeType)(nil),       // 72: beerproto.CarbonationRangeType
	(*CarbonationType)(nil),            // 73: beerproto.CarbonationType
	(*FermentationProcedureType)(nil),  // 74: beerproto.FermentationProcedureType
	(*FermentationStepType)(nil),       // 75: beerproto.FermentationStepType
	(*BoilProcedureType)(nil),          // 76: beerproto.BoilProcedureType
	(*BoilStepType)(nil),               // 77: beerproto.BoilStepType
	(*FermentableType)(nil),            // 78: beerproto.FermentableType
	(*FermentableInventoryType)(nil),   // 79: beerproto.FermentableInventoryType
	(*DiastaticPowerType)(nil),         // 80: beerproto.DiastaticPowerType
	(*CultureInformation)(nil),         // 81: beerproto.CultureInformation
	(*TemperatureRangeType)(nil),       // 82: beerproto.TemperatureRangeType
	(*TemperatureType)(nil),            // 83: beerproto.TemperatureType
	(*Zymocide)(nil),                   // 84: beerproto.Zymocide
	(*CultureInventoryType)(nil),       // 85: beerproto.CultureInventoryType
	(*EquipmentType)(nil),              // 86: beerproto.EquipmentType
	(*EquipmentItemType)(nil),          // 87: beerproto.EquipmentItemType
	(*SpecificHeatType)(nil),           // 88: beerproto.SpecificHeatType
	(*PackagingProcedureType)(nil),     // 89: beerproto.PackagingProcedureType
	(*PackagingVesselType)(nil),        // 90: beerproto.PackagingVesselType
	(*VarietyInformation)(nil),         // 91: beerproto.VarietyInformation
	(*HopInventoryType)(nil),           // 92: beerproto.HopInventoryType
	(*OilContentType)(nil),             // 93: beerproto.OilContentType
	(*WaterBase)(nil),                  // 94: beerproto.WaterBase
}
var file_beer_proto_depIdxs = []int32{
	39,  // 0: beerproto.Recipe.mashes:type_name -> beerproto.MashProcedureType
	45,  // 1: beerproto.Recipe.recipes:type_name -> beerproto.RecipeType
	61,  // 2: beerproto.Recipe.miscellaneous_ingredients:type_name -> beerproto.MiscellaneousType
	63,  // 3: beerproto.Recipe.styles:type_name -> beerproto.StyleType
	74,  // 4: beerproto.Recipe.fermentations:type_name -> beerproto.FermentationProcedureType
	76,  // 5: beerproto.Recipe.boil:type_name -> beerproto.BoilProcedureType
	78,  // 6: beerproto.Recipe.fermentables:type_name -> beerproto.FermentableType
	54,  // 7: beerproto.Recipe.timing_object:type_name -> beerproto.TimingType
	81,  // 8: beerproto.Recipe.cultures:type_name -> beerproto.CultureInformation
	86,  // 9: beerproto.Recipe.equipments:type_name -> beerproto.EquipmentType
	89,  // 10: beerproto.Recipe.packaging:type_name -> beerproto.PackagingProcedureType
	91,  // 11: beerproto.Recipe.hop_varieties:type_name -> beerproto.VarietyInformation
	94,  // 12: beerproto.Recipe.profiles:type_name -> beerproto.WaterBase
	83,  // 13: beerproto.MashProcedureType.grain_temperature:type_name -> beerproto.TemperatureType
	40,  // 14: beerproto.MashProcedureType.mash_steps:type_name -> beerproto.MashStepType
	41,  // 15: beerproto.MashStepType.step_time:type_name -> beerproto.TimeType
	41,  // 16: beerproto.MashStepType.ramp_time:type_name -> beerproto.TimeType
	83,  // 17: beerproto.MashStepType.end_temperature:type_name -> beerproto.TemperatureType
	83,  // 18: beerproto.MashStepType.infuse_temperature:type_name -> beerproto.TemperatureType
	42,  // 19: beerproto.MashStepType.start_pH:type_name -> beerproto.AcidityType
	42,  // 20: beerproto.MashStepType.end_pH:type_name -> beerproto.AcidityType
	0,   // 21: beerproto.MashStepType.type:type_name -> beerproto.MashStepType.MashStepTypeType
	43,  // 22: beerproto.MashStepType.amount:type_name -> beerproto.VolumeType
	83,  // 23: beerproto.MashStepType.step_temperature:type_name -> beerproto.TemperatureType
	44,  // 24: beerproto.MashStepType.water_grain_ratio:type_name -> beerproto.SpecificVolumeType
	1,   // 25: beerproto.TimeType.unit:type_name -> beerproto.TimeType.TimeUnitType
	2,   // 26: beerproto.AcidityType.unit:type_name -> beerproto.AcidityType.AcidityUnitType
	3,   // 27: beerproto.VolumeType.unit:type_name -> beerproto.VolumeType.VolumeUnitType
	4,   // 28: beerproto.SpecificVolumeType.unit:type_name -> beerproto.SpecificVolumeType.SpecificVolumeUnitType
	46,  // 29: beerproto.RecipeType.efficiency:type_name -> beerproto.EfficiencyType
	47,  // 30: beerproto.RecipeType.style:type_name -> beerproto.RecipeStyleType
	48,  // 31: beerproto.RecipeType.ibu_estimate:type_name -> beerproto.IBUEstimateType
	71,  // 32: beerproto.RecipeType.color_estimate:type_name -> beerproto.ColorType
	42,  // 33: beerproto.RecipeType.beer_pH:type_name -> beerproto.AcidityType
	5,   // 34: beerproto.RecipeType.type:type_name -> beerproto.RecipeType.RecipeTypeType
	69,  // 35: beerproto.RecipeType.original_gravity:type_name -> beerproto.GravityType
	69,  // 36: beerproto.RecipeType.final_gravity:type_name -> beerproto.GravityType
	74,  // 37: beerproto.RecipeType.fermentation:type_name -> beerproto.FermentationProcedureType
	49,  // 38: beerproto.RecipeType.ingredients:type_name -> beerproto.IngredientsType
	39,  // 39: beerproto.RecipeType.mash:type_name -> beerproto.MashProcedureType
	89,  // 40: beerproto.RecipeType.packaging:type_name -> beerproto.PackagingProcedureType
	76,  // 41: beerproto.RecipeType.boil:type_name -> beerproto.BoilProcedureType
	60,  // 42: beerproto.RecipeType.taste:type_name -> beerproto.TasteType
	43,  // 43: beerproto.RecipeType.batch_size:type_name -> beerproto.VolumeType
	67,  // 44: beerproto.RecipeType.alcohol_by_volume:type_name -> beerproto.PercentType
	67,  // 45: beerproto.RecipeType.apparent_attenuation:type_name -> beerproto.PercentType
	67,  // 46: beerproto.EfficiencyType.conversion:type_name -> beerproto.PercentType
	67,  // 47: beerproto.EfficiencyType.lauter:type_name -> beerproto.PercentType
	67,  // 48: beerproto.EfficiencyType.mash:type_name -> beerproto.PercentType
	67,  // 49: beerproto.EfficiencyType.brewhouse:type_name -> beerproto.PercentType
	6,   // 50: beerproto.RecipeStyleType.type:type_name -> beerproto.RecipeStyleType.StyleCategories
	7,   // 51: beerproto.IBUEstimateType.method:type_name -> beerproto.IBUEstimateType.IBUMethodType
	50,  // 52: beerproto.IngredientsType.miscellaneous_additions:type_name -> beerproto.MiscellaneousAdditionType
	53,  // 53: beerproto.IngredientsType.culture_additions:type_name -> beerproto.CultureAdditionType
	55,  // 54: beerproto.IngredientsType.water_additions:type_name -> beerproto.WaterAdditionType
	57,  // 55: beerproto.IngredientsType.fermentable_additions:type_name -> beerproto.FermentableAdditionType
	59,  // 56: beerproto.IngredientsType.hop_additions:type_name -> beerproto.HopAdditionType
	54,  // 57: beerproto.MiscellaneousAdditionType.timing:type_name -> beerproto.TimingType
	8,   // 58: beerproto.MiscellaneousAdditionType.type:type_name -> beerproto.MiscellaneousAdditionType.MiscellaneousBaseType
	51,  // 59: beerproto.MiscellaneousAdditionType.mass:type_name -> beerproto.MassType
	52,  // 60: beerproto.MiscellaneousAdditionType.unit:type_name -> beerproto.UnitType
	43,  // 61: beerproto.MiscellaneousAdditionType.volume:type_name -> beerproto.VolumeType
	9,   // 62: beerproto.MassType.unit:type_name -> beerproto.MassType.MassUnitType
	10,  // 63: beerproto.UnitType.unit:type_name -> beerproto.UnitType.UnitUnitType
	11,  // 64: beerproto.CultureAdditionType.form:type_name -> beerproto.CultureAdditionType.CultureBaseForm
	12,  // 65: beerproto.CultureAdditionType.type:type_name -> beerproto.CultureAdditionType.CultureBaseType
	67,  // 66: beerproto.CultureAdditionType.attenuation:type_name -> beerproto.PercentType
	54,  // 67: beerproto.CultureAdditionType.timing:type_name -> beerproto.TimingType
	51,  // 68: beerproto.CultureAdditionType.mass:type_name -> beerproto.MassType
	52,  // 69: beerproto.CultureAdditionType.unit:type_name -> beerproto.UnitType
	43,  // 70: beerproto.CultureAdditionType.volume:type_name -> beerproto.VolumeType
	41,  // 71: beerproto.TimingType.time:type_name -> beerproto.TimeType
	41,  // 72: beerproto.TimingType.duration:type_name -> beerproto.TimeType
	69,  // 73: beerproto.TimingType.specific_gravity:type_name -> beerproto.GravityType
	42,  // 74: beerproto.TimingType.ph:type_name -> beerproto.AcidityType
	13,  // 75: beerproto.TimingType.use:type_name -> beerproto.TimingType.UseType
	56,  // 76: beerproto.WaterAdditionType.flouride:type_name -> beerproto.ConcentrationType
	56,  // 77: beerproto.WaterAdditionType.sulfate:type_name -> beerproto.ConcentrationType
	56,  // 78: beerproto.WaterAdditionType.nitrate:type_name -> beerproto.ConcentrationType
	56,  // 79: beerproto.WaterAdditionType.nitrite:type_name -> beerproto.ConcentrationType
	56,  // 80: beerproto.WaterAdditionType.chloride:type_name -> beerproto.ConcentrationType
	43,  // 81: beerproto.WaterAdditionType.amount:type_name -> beerproto.VolumeType
	56,  // 82: beerproto.WaterAdditionType.potassium:type_name -> beerproto.ConcentrationType
	56,  // 83: beerproto.WaterAdditionType.magnesium:type_name -> beerproto.ConcentrationType
	56,  // 84: beerproto.WaterAdditionType.iron:type_name -> beerproto.ConcentrationType
	56,  // 85: beerproto.WaterAdditionType.bicarbonate:type_name -> beerproto.ConcentrationType
	56,  // 86: beerproto.WaterAdditionType.calcium:type_name -> beerproto.ConcentrationType
	56,  // 87: beerproto.WaterAdditionType.carbonate:type_name -> beerproto.ConcentrationType
	56,  // 88: beerproto.WaterAdditionType.sodium:type_name -> beerproto.ConcentrationType
	14,  // 89: beerproto.ConcentrationType.unit:type_name -> beerproto.ConcentrationType.ConcentrationUnitType
	15,  // 90: beerproto.FermentableAdditionType.type:type_name -> beerproto.FermentableAdditionType.FermentableBaseType
	16,  // 91: beerproto.FermentableAdditionType.grain_group:type_name -> beerproto.FermentableAdditionType.FermentableBaseGrainGroup
	58,  // 92: beerproto.FermentableAdditionType.yield:type_name -> beerproto.YieldType
	71,  // 93: beerproto.FermentableAdditionType.color:type_name -> beerproto.ColorType
	54,  // 94: beerproto.FermentableAdditionType.timing:type_name -> beerproto.TimingType
	51,  // 95: beerproto.FermentableAdditionType.mass:type_name -> beerproto.MassType
	43,  // 96: beerproto.FermentableAdditionType.volume:type_name -> beerproto.VolumeType
	67,  // 97: beerproto.YieldType.fine_grind:type_name -> beerproto.PercentType
	67,  // 98: beerproto.YieldType.coarse_grind:type_name -> beerproto.PercentType
	67,  // 99: beerproto.YieldType.fine_coarse_difference:type_name -> beerproto.PercentType
	69,  // 100: beerproto.YieldType.potential:type_name -> beerproto.GravityType
	67,  // 101: beerproto.HopAdditionType.beta_acid:type_name -> beerproto.PercentType
	17,  // 102: beerproto.HopAdditionType.form:type_name -> beerproto.HopAdditionType.HopVarietyBaseForm
	54,  // 103: beerproto.HopAdditionType.timing:type_name -> beerproto.TimingType
	67,  // 104: beerproto.HopAdditionType.alpha_acid:type_name -> beerproto.PercentType
	51,  // 105: beerproto.HopAdditionType.mass:type_name -> beerproto.MassType
	43,  // 106: beerproto.HopAdditionType.volume:type_name -> beerproto.VolumeType
	18,  // 107: beerproto.MiscellaneousType.type:type_name -> beerproto.MiscellaneousType.MiscellaneousBaseType
	62,  // 108: beerproto.MiscellaneousType.inventory:type_name -> beerproto.MiscellaneousInventoryType
	51,  // 109: beerproto.MiscellaneousInventoryType.mass:type_name -> beerproto.MassType
	52,  // 110: beerproto.MiscellaneousInventoryType.unit:type_name -> beerproto.UnitType
	43,  // 111: beerproto.MiscellaneousInventoryType.volume:type_name -> beerproto.VolumeType
	68,  // 112: beerproto.StyleType.final_gravity:type_name -> beerproto.GravityRangeType
	70,  // 113: beerproto.StyleType.color:type_name -> beerproto.ColorRangeType
	70,  // 114: beerproto.StyleType.original_gravity:type_name -> beerproto.ColorRangeType
	72,  // 115: beerproto.StyleType.carbonation:type_name -> beerproto.CarbonationRangeType
	66,  // 116: beerproto.StyleType.alcohol_by_volume:type_name -> beerproto.PercentRangeType
	64,  // 117: beerproto.StyleType.international_bitterness_units:type_name -> beerproto.BitternessRangeType
	19,  // 118: beerproto.StyleType.type:type_name -> beerproto.StyleType.StyleCategories
	65,  // 119: beerproto.BitternessRangeType.minimum:type_name -> beerproto.BitternessType
	65,  // 120: beerproto.BitternessRangeType.maximum:type_name -> beerproto.BitternessType
	20,  // 121: beerproto.BitternessType.unit:type_name -> beerproto.BitternessType.BitternessUnitType
	67,  // 122: beerproto.PercentRangeType.minimum:type_name -> beerproto.PercentType
	67,  // 123: beerproto.PercentRangeType.maximum:type_name -> beerproto.PercentType
	21,  // 124: beerproto.PercentType.unit:type_name -> beerproto.PercentType.PercentUnitType
	69,  // 125: beerproto.GravityRangeType.minimum:type_name -> beerproto.GravityType
	69,  // 126: beerproto.GravityRangeType.maximum:type_name -> beerproto.GravityType
	22,  // 127: beerproto.GravityType.unit:type_name -> beerproto.GravityType.GravityUnitType
	71,  // 128: beerproto.ColorRangeType.minimum:type_name -> beerproto.ColorType
	71,  // 129: beerproto.ColorRangeType.maximum:type_name -> beerproto.ColorType
	23,  // 130: beerproto.ColorType.unit:type_name -> beerproto.ColorType.ColorUnitType
	73,  // 131: beerproto.CarbonationRangeType.minimum:type_name -> beerproto.CarbonationType
	73,  // 132: beerproto.CarbonationRangeType.maximum:type_name -> beerproto.CarbonationType
	24,  // 133: beerproto.CarbonationType.unit:type_name -> beerproto.CarbonationType.CarbonationUnitType
	75,  // 134: beerproto.FermentationProcedureType.fermentation_steps:type_name -> beerproto.FermentationStepType
	83,  // 135: beerproto.FermentationStepType.end_temperature:type_name -> beerproto.TemperatureType
	41,  // 136: beerproto.FermentationStepType.step_time:type_name -> beerproto.TimeType
	69,  // 137: beerproto.FermentationStepType.start_gravity:type_name -> beerproto.GravityType
	69,  // 138: beerproto.FermentationStepType.end_gravity:type_name -> beerproto.GravityType
	42,  // 139: beerproto.FermentationStepType.start_ph:type_name -> beerproto.AcidityType
	83,  // 140: beerproto.FermentationStepType.start_temperature:type_name -> beerproto.TemperatureType
	42,  // 141: beerproto.FermentationStepType.end_ph:type_name -> beerproto.AcidityType
	43,  // 142: beerproto.BoilProcedureType.pre_boil_size:type_name -> beerproto.VolumeType
	41,  // 143: beerproto.BoilProcedureType.boil_time:type_name -> beerproto.TimeType
	77,  // 144: beerproto.BoilProcedureType.boil_steps:type_name -> beerproto.BoilStepType
	69,  // 145: beerproto.BoilStepType.end_gravity:type_name -> beerproto.GravityType
	25,  // 146: beerproto.BoilStepType.chilling_type:type_name -> beerproto.BoilStepType.BoilStepTypeChillingType
	83,  // 147: beerproto.BoilStepType.end_temperature:type_name -> beerproto.TemperatureType
	41,  // 148: beerproto.BoilStepType.ramp_time:type_name -> beerproto.TimeType
	41,  // 149: beerproto.BoilStepType.step_time:type_name -> beerproto.TimeType
	69,  // 150: beerproto.BoilStepType.start_gravity:type_name -> beerproto.GravityType
	42,  // 151: beerproto.BoilStepType.start_ph:type_name -> beerproto.AcidityType
	42,  // 152: beerproto.BoilStepType.end_ph:type_name -> beerproto.AcidityType
	83,  // 153: beerproto.BoilStepType.start_temperature:type_name -> beerproto.TemperatureType
	67,  // 154: beerproto.FermentableType.max_in_batch:type_name -> beerproto.PercentType
	67,  // 155: beerproto.FermentableType.protein:type_name -> beerproto.PercentType
	27,  // 156: beerproto.FermentableType.grain_group:type_name -> beerproto.FermentableType.FermentableBaseGrainGroup
	58,  // 157: beerproto.FermentableType.yield:type_name -> beerproto.YieldType
	26,  // 158: beerproto.FermentableType.type:type_name -> beerproto.FermentableType.FermentableBaseType
	71,  // 159: beerproto.FermentableType.color:type_name -> beerproto.ColorType
	80,  // 160: beerproto.FermentableType.diastatic_power:type_name -> beerproto.DiastaticPowerType
	67,  // 161: beerproto.FermentableType.moisture:type_name -> beerproto.PercentType
	79,  // 162: beerproto.FermentableType.inventory:type_name -> beerproto.FermentableInventoryType
	51,  // 163: beerproto.FermentableInventoryType.mass:type_name -> beerproto.MassType
	43,  // 164: beerproto.FermentableInventoryType.volume:type_name -> beerproto.VolumeType
	28,  // 165: beerproto.DiastaticPowerType.unit:type_name -> beerproto.DiastaticPowerType.DiastaticPowerUnitType
	31,  // 166: beerproto.CultureInformation.form:type_name -> beerproto.CultureInformation.CultureBaseForm
	82,  // 167: beerproto.CultureInformation.temperature_range:type_name -> beerproto.TemperatureRangeType
	85,  // 168: beerproto.CultureInformation.inventory:type_name -> beerproto.CultureInventoryType
	67,  // 169: beerproto.CultureInformation.alcohol_tolerance:type_name -> beerproto.PercentType
	30,  // 170: beerproto.CultureInformation.type:type_name -> beerproto.CultureInformation.CultureBaseType
	29,  // 171: beerproto.CultureInformation.flocculation:type_name -> beerproto.CultureInformation.QualitativeRangeType
	66,  // 172: beerproto.CultureInformation.attenuation_range:type_name -> beerproto.PercentRangeType
	84,  // 173: beerproto.CultureInformation.zymocide:type_name -> beerproto.Zymocide
	83,  // 174: beerproto.TemperatureRangeType.minimum:type_name -> beerproto.TemperatureType
	83,  // 175: beerproto.TemperatureRangeType.maximum:type_name -> beerproto.TemperatureType
	32,  // 176: beerproto.TemperatureType.unit:type_name -> beerproto.TemperatureType.TemperatureUnitType
	43,  // 177: beerproto.CultureInventoryType.liquid:type_name -> beerproto.VolumeType
	51,  // 178: beerproto.CultureInventoryType.dry:type_name -> beerproto.MassType
	43,  // 179: beerproto.CultureInventoryType.slant:type_name -> beerproto.VolumeType
	43,  // 180: beerproto.CultureInventoryType.culture:type_name -> beerproto.VolumeType
	87,  // 181: beerproto.EquipmentType.equipment_items:type_name -> beerproto.EquipmentItemType
	43,  // 182: beerproto.EquipmentItemType.boil_rate_per_hour:type_name -> beerproto.VolumeType
	33,  // 183: beerproto.EquipmentItemType.form:type_name -> beerproto.EquipmentItemType.EquipmentBaseForm
	43,  // 184: beerproto.EquipmentItemType.drain_rate_per_minute:type_name -> beerproto.VolumeType
	88,  // 185: beerproto.EquipmentItemType.specific_heat:type_name -> beerproto.SpecificHeatType
	44,  // 186: beerproto.EquipmentItemType.grain_absorption_rate:type_name -> beerproto.SpecificVolumeType
	43,  // 187: beerproto.EquipmentItemType.maximum_volume:type_name -> beerproto.VolumeType
	51,  // 188: beerproto.EquipmentItemType.weight:type_name -> beerproto.MassType
	43,  // 189: beerproto.EquipmentItemType.loss:type_name -> beerproto.VolumeType
	34,  // 190: beerproto.SpecificHeatType.unit:type_name -> beerproto.SpecificHeatType.SpecificHeatUnitType
	43,  // 191: beerproto.PackagingProcedureType.packaged_volume:type_name -> beerproto.VolumeType
	90,  // 192: beerproto.PackagingProcedureType.packaging_vessels:type_name -> beerproto.PackagingVesselType
	35,  // 193: beerproto.PackagingVesselType.type:type_name -> beerproto.PackagingVesselType.PackagingVesselTypeType
	69,  // 194: beerproto.PackagingVesselType.start_gravity:type_name -> beerproto.GravityType
	41,  // 195: beerproto.PackagingVesselType.step_time:type_name -> beerproto.TimeType
	69,  // 196: beerproto.PackagingVesselType.end_gravity:type_name -> beerproto.GravityType
	43,  // 197: beerproto.PackagingVesselType.vessel_volume:type_name -> beerproto.VolumeType
	42,  // 198: beerproto.PackagingVesselType.start_ph:type_name -> beerproto.AcidityType
	83,  // 199: beerproto.PackagingVesselType.start_temperature:type_name -> beerproto.TemperatureType
	42,  // 200: beerproto.PackagingVesselType.end_ph:type_name -> beerproto.AcidityType
	83,  // 201: beerproto.PackagingVesselType.end_temperature:type_name -> beerproto.TemperatureType
	92,  // 202: beerproto.VarietyInformation.inventory:type_name -> beerproto.HopInventoryType
	37,  // 203: beerproto.VarietyInformation.type:type_name -> beerproto.VarietyInformation.VarietyInformationType
	93,  // 204: beerproto.VarietyInformation.oil_content:type_name -> beerproto.OilContentType
	67,  // 205: beerproto.VarietyInformation.percent_lost:type_name -> beerproto.PercentType
	67,  // 206: beerproto.VarietyInformation.alpha_acid:type_name -> beerproto.PercentType
	67,  // 207: beerproto.VarietyInformation.beta_acid:type_name -> beerproto.PercentType
	36,  // 208: beerproto.VarietyInformation.form:type_name -> beerproto.VarietyInformation.HopVarietyBaseForm
	51,  // 209: beerproto.HopInventoryType.mass:type_name -> beerproto.MassType
	43,  // 210: beerproto.HopInventoryType.volume:type_name -> beerproto.VolumeType
	67,  // 211: beerproto.OilContentType.polyphenols:type_name -> beerproto.PercentType
	67,  // 212: beerproto.OilContentType.farnesene:type_name -> beerproto.PercentType
	67,  // 213: beerproto.OilContentType.limonene:type_name -> beerproto.PercentType
	67,  // 214: beerproto.OilContentType.nerol:type_name -> beerproto.PercentType
	67,  // 215: beerproto.OilContentType.geraniol:type_name -> beerproto.PercentType
	67,  // 216: beerproto.OilContentType.b_pinene:type_name -> beerproto.PercentType
	67,  // 217: beerproto.OilContentType.linalool:type_name -> beerproto.PercentType
	67,  // 218: beerproto.OilContentType.caryophyllene:type_name -> beerproto.PercentType
	67,  // 219: beerproto.OilContentType.cohumulone:type_name -> beerproto.PercentType
	67,  // 220: beerproto.OilContentType.xanthohumol:type_name -> beerproto.PercentType
	67,  // 221: beerproto.OilContentType.humulene:type_name -> beerproto.PercentType
	67,  // 222: beerproto.OilContentType.myrcene:type_name -> beerproto.PercentType
	67,  // 223: beerproto.OilContentType.pinene:type_name -> beerproto.PercentType
	56,  // 224: beerproto.WaterBase.calcium:type_name -> beerproto.ConcentrationType
	56,  // 225: beerproto.WaterBase.nitrite:type_name -> beerproto.ConcentrationType
	56,  // 226: beerproto.WaterBase.chloride:type_name -> beerproto.ConcentrationType
	56,  // 227: beerproto.WaterBase.potassium:type_name -> beerproto.ConcentrationType
	56,  // 228: beerproto.WaterBase.carbonate:type_name -> beerproto.ConcentrationType
	56,  // 229: beerproto.WaterBase.iron:type_name -> beerproto.ConcentrationType
	56,  // 230: beerproto.WaterBase.flouride:type_name -> beerproto.ConcentrationType
	56,  // 231: beerproto.WaterBase.sulfate:type_name -> beerproto.ConcentrationType
	56,  // 232: beerproto.WaterBase.magnesium:type_name -> beerproto.ConcentrationType
	56,  // 233: beerproto.WaterBase.bicarbonate:type_name -> beerproto.ConcentrationType
	56,  // 234: beerproto.WaterBase.nitrate:type_name -> beerproto.ConcentrationType
	56,  // 235: beerproto.WaterBase.sodium:type_name -> beerproto.ConcentrationType
	236, // [236:236] is the sub-list for method output_type
	236, // [236:236] is the sub-list for method input_type
	236, // [236:236] is the sub-list for extension type_name
	236, // [236:236] is the sub-list for extension extendee
	0,   // [0:236] is the sub-list for field type_name
}

func init() { file_beer_proto_init() }
func file_beer_proto_init() {
	if File_beer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MashProcedureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MashStepType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcidityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificVolumeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EfficiencyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeStyleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IBUEstimateType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngredientsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CultureAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaterAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcentrationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HopAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasteType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitternessRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitternessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravityRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarbonationRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarbonationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentationProcedureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentationStepType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoilProcedureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoilStepType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiastaticPowerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CultureInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zymocide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CultureInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentItemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificHeatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagingProcedureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagingVesselType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarietyInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HopInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OilContentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaterBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beer_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MiscellaneousAdditionType_Mass)(nil),
		(*MiscellaneousAdditionType_Unit)(nil),
		(*MiscellaneousAdditionType_Volume)(nil),
	}
	file_beer_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CultureAdditionType_Mass)(nil),
		(*CultureAdditionType_Unit)(nil),
		(*CultureAdditionType_Volume)(nil),
	}
	file_beer_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*FermentableAdditionType_Mass)(nil),
		(*FermentableAdditionType_Volume)(nil),
	}
	file_beer_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*HopAdditionType_Mass)(nil),
		(*HopAdditionType_Volume)(nil),
	}
	file_beer_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*MiscellaneousInventoryType_Mass)(nil),
		(*MiscellaneousInventoryType_Unit)(nil),
		(*MiscellaneousInventoryType_Volume)(nil),
	}
	file_beer_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*FermentableInventoryType_Mass)(nil),
		(*FermentableInventoryType_Volume)(nil),
	}
	file_beer_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*HopInventoryType_Mass)(nil),
		(*HopInventoryType_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beer_proto_rawDesc,
			NumEnums:      38,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beer_proto_goTypes,
		DependencyIndexes: file_beer_proto_depIdxs,
		EnumInfos:         file_beer_proto_enumTypes,
		MessageInfos:      file_beer_proto_msgTypes,
	}.Build()
	File_beer_proto = out.File
	file_beer_proto_rawDesc = nil
	file_beer_proto_goTypes = nil
	file_beer_proto_depIdxs = nil
}
